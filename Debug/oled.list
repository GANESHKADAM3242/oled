
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005450  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080070a0  080070a0  000170a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  080070a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000047c  20000024  080070cc  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200004a0  080070cc  000204a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b3af  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000177f  00000000  00000000  0002b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005979  00000000  00000000  0002cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000720  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000738  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00013397  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006a0c  00000000  00000000  000466e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00068fd1  00000000  00000000  0004d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  000b60c4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000141c  00000000  00000000  000b6140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c38 	.word	0x08001c38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08001c38 	.word	0x08001c38

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f894 	bl	8000290 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f855 	bl	8000228 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000020 	.word	0x20000020

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 f82f 	bl	8000204 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fc6c 	bl	8001a88 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000448 	.word	0x20000448
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000448 	.word	0x20000448

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000206:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000208:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020c:	041b      	lsls	r3, r3, #16
 800020e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000210:	0200      	lsls	r0, r0, #8
 8000212:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000216:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000218:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 800021c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000220:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000222:	4770      	bx	lr
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000228:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <HAL_NVIC_SetPriority+0x60>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000232:	f1c3 0407 	rsb	r4, r3, #7
 8000236:	2c04      	cmp	r4, #4
 8000238:	bf28      	it	cs
 800023a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023c:	1d1d      	adds	r5, r3, #4
 800023e:	2d06      	cmp	r5, #6
 8000240:	d918      	bls.n	8000274 <HAL_NVIC_SetPriority+0x4c>
 8000242:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	f04f 35ff 	mov.w	r5, #4294967295
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	ea21 0104 	bic.w	r1, r1, r4
 8000250:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000252:	fa05 f303 	lsl.w	r3, r5, r3
 8000256:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800025c:	2800      	cmp	r0, #0
 800025e:	db0b      	blt.n	8000278 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	0109      	lsls	r1, r1, #4
 8000262:	b2c9      	uxtb	r1, r1
 8000264:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000268:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800026c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000270:	bc30      	pop	{r4, r5}
 8000272:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000274:	2300      	movs	r3, #0
 8000276:	e7e5      	b.n	8000244 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f000 000f 	and.w	r0, r0, #15
 800027c:	0109      	lsls	r1, r1, #4
 800027e:	b2c9      	uxtb	r1, r1
 8000280:	4b02      	ldr	r3, [pc, #8]	; (800028c <HAL_NVIC_SetPriority+0x64>)
 8000282:	5419      	strb	r1, [r3, r0]
 8000284:	e7f4      	b.n	8000270 <HAL_NVIC_SetPriority+0x48>
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00
 800028c:	e000ed14 	.word	0xe000ed14

08000290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	3801      	subs	r0, #1
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d20a      	bcs.n	80002ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x24>)
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x28>)
 800029e:	21f0      	movs	r1, #240	; 0xf0
 80002a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	2000      	movs	r0, #0
 80002a6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002bc:	b4f0      	push	{r4, r5, r6, r7}
 80002be:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002c0:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 80002c2:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002c4:	e0a2      	b.n	800040c <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	d05a      	beq.n	8000380 <HAL_GPIO_Init+0xc4>
 80002ca:	2d01      	cmp	r5, #1
 80002cc:	d100      	bne.n	80002d0 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002ce:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002d0:	2bff      	cmp	r3, #255	; 0xff
 80002d2:	d869      	bhi.n	80003a8 <HAL_GPIO_Init+0xec>
 80002d4:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80002d6:	2bff      	cmp	r3, #255	; 0xff
 80002d8:	d869      	bhi.n	80003ae <HAL_GPIO_Init+0xf2>
 80002da:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002dc:	f8dc 4000 	ldr.w	r4, [ip]
 80002e0:	270f      	movs	r7, #15
 80002e2:	40af      	lsls	r7, r5
 80002e4:	ea24 0407 	bic.w	r4, r4, r7
 80002e8:	fa06 f505 	lsl.w	r5, r6, r5
 80002ec:	432c      	orrs	r4, r5
 80002ee:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002f2:	684c      	ldr	r4, [r1, #4]
 80002f4:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80002f8:	f000 8087 	beq.w	800040a <HAL_GPIO_Init+0x14e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002fc:	4c5f      	ldr	r4, [pc, #380]	; (800047c <HAL_GPIO_Init+0x1c0>)
 80002fe:	69a5      	ldr	r5, [r4, #24]
 8000300:	f045 0501 	orr.w	r5, r5, #1
 8000304:	61a5      	str	r5, [r4, #24]
 8000306:	69a4      	ldr	r4, [r4, #24]
 8000308:	f004 0401 	and.w	r4, r4, #1
 800030c:	9401      	str	r4, [sp, #4]
 800030e:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000310:	0895      	lsrs	r5, r2, #2
 8000312:	1caf      	adds	r7, r5, #2
 8000314:	4c5a      	ldr	r4, [pc, #360]	; (8000480 <HAL_GPIO_Init+0x1c4>)
 8000316:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800031a:	f002 0703 	and.w	r7, r2, #3
 800031e:	00bf      	lsls	r7, r7, #2
 8000320:	f04f 0c0f 	mov.w	ip, #15
 8000324:	fa0c fc07 	lsl.w	ip, ip, r7
 8000328:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800032c:	4c55      	ldr	r4, [pc, #340]	; (8000484 <HAL_GPIO_Init+0x1c8>)
 800032e:	42a0      	cmp	r0, r4
 8000330:	d043      	beq.n	80003ba <HAL_GPIO_Init+0xfe>
 8000332:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000336:	42a0      	cmp	r0, r4
 8000338:	f000 8081 	beq.w	800043e <HAL_GPIO_Init+0x182>
 800033c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000340:	42a0      	cmp	r0, r4
 8000342:	d07e      	beq.n	8000442 <HAL_GPIO_Init+0x186>
 8000344:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000348:	42a0      	cmp	r0, r4
 800034a:	d034      	beq.n	80003b6 <HAL_GPIO_Init+0xfa>
 800034c:	2404      	movs	r4, #4
 800034e:	e035      	b.n	80003bc <HAL_GPIO_Init+0x100>
      switch (GPIO_Init->Mode)
 8000350:	4f4d      	ldr	r7, [pc, #308]	; (8000488 <HAL_GPIO_Init+0x1cc>)
 8000352:	42bd      	cmp	r5, r7
 8000354:	d014      	beq.n	8000380 <HAL_GPIO_Init+0xc4>
 8000356:	d90b      	bls.n	8000370 <HAL_GPIO_Init+0xb4>
 8000358:	4f4c      	ldr	r7, [pc, #304]	; (800048c <HAL_GPIO_Init+0x1d0>)
 800035a:	42bd      	cmp	r5, r7
 800035c:	d010      	beq.n	8000380 <HAL_GPIO_Init+0xc4>
 800035e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000362:	42bd      	cmp	r5, r7
 8000364:	d00c      	beq.n	8000380 <HAL_GPIO_Init+0xc4>
 8000366:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800036a:	42bd      	cmp	r5, r7
 800036c:	d1b0      	bne.n	80002d0 <HAL_GPIO_Init+0x14>
 800036e:	e007      	b.n	8000380 <HAL_GPIO_Init+0xc4>
 8000370:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000374:	42bd      	cmp	r5, r7
 8000376:	d003      	beq.n	8000380 <HAL_GPIO_Init+0xc4>
 8000378:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800037c:	42bd      	cmp	r5, r7
 800037e:	d1a7      	bne.n	80002d0 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000380:	688d      	ldr	r5, [r1, #8]
 8000382:	b17d      	cbz	r5, 80003a4 <HAL_GPIO_Init+0xe8>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000384:	2d01      	cmp	r5, #1
 8000386:	d008      	beq.n	800039a <HAL_GPIO_Init+0xde>
            GPIOx->BRR = ioposition;
 8000388:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800038a:	2608      	movs	r6, #8
 800038c:	e7a0      	b.n	80002d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800038e:	68ce      	ldr	r6, [r1, #12]
 8000390:	3608      	adds	r6, #8
          break;
 8000392:	e79d      	b.n	80002d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000394:	68ce      	ldr	r6, [r1, #12]
 8000396:	360c      	adds	r6, #12
          break;
 8000398:	e79a      	b.n	80002d0 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800039a:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800039c:	2608      	movs	r6, #8
 800039e:	e797      	b.n	80002d0 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003a0:	2600      	movs	r6, #0
 80003a2:	e795      	b.n	80002d0 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003a4:	2604      	movs	r6, #4
 80003a6:	e793      	b.n	80002d0 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003a8:	f100 0c04 	add.w	ip, r0, #4
 80003ac:	e793      	b.n	80002d6 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80003ae:	f1a2 0508 	sub.w	r5, r2, #8
 80003b2:	00ad      	lsls	r5, r5, #2
 80003b4:	e792      	b.n	80002dc <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80003b6:	2403      	movs	r4, #3
 80003b8:	e000      	b.n	80003bc <HAL_GPIO_Init+0x100>
 80003ba:	2400      	movs	r4, #0
 80003bc:	40bc      	lsls	r4, r7
 80003be:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 80003c2:	3502      	adds	r5, #2
 80003c4:	4f2e      	ldr	r7, [pc, #184]	; (8000480 <HAL_GPIO_Init+0x1c4>)
 80003c6:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003ca:	684c      	ldr	r4, [r1, #4]
 80003cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80003d0:	d039      	beq.n	8000446 <HAL_GPIO_Init+0x18a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003d2:	4d2f      	ldr	r5, [pc, #188]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 80003d4:	682c      	ldr	r4, [r5, #0]
 80003d6:	431c      	orrs	r4, r3
 80003d8:	602c      	str	r4, [r5, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003da:	684c      	ldr	r4, [r1, #4]
 80003dc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80003e0:	d037      	beq.n	8000452 <HAL_GPIO_Init+0x196>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003e2:	4d2b      	ldr	r5, [pc, #172]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 80003e4:	686c      	ldr	r4, [r5, #4]
 80003e6:	431c      	orrs	r4, r3
 80003e8:	606c      	str	r4, [r5, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ea:	684c      	ldr	r4, [r1, #4]
 80003ec:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 80003f0:	d035      	beq.n	800045e <HAL_GPIO_Init+0x1a2>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f2:	4d27      	ldr	r5, [pc, #156]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 80003f4:	68ac      	ldr	r4, [r5, #8]
 80003f6:	431c      	orrs	r4, r3
 80003f8:	60ac      	str	r4, [r5, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003fa:	684c      	ldr	r4, [r1, #4]
 80003fc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8000400:	d033      	beq.n	800046a <HAL_GPIO_Init+0x1ae>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000402:	4d23      	ldr	r5, [pc, #140]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 8000404:	68ec      	ldr	r4, [r5, #12]
 8000406:	4323      	orrs	r3, r4
 8000408:	60eb      	str	r3, [r5, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 800040a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800040c:	680b      	ldr	r3, [r1, #0]
 800040e:	fa33 f402 	lsrs.w	r4, r3, r2
 8000412:	d030      	beq.n	8000476 <HAL_GPIO_Init+0x1ba>
    ioposition = (0x01uL << position);
 8000414:	2401      	movs	r4, #1
 8000416:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000418:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 800041a:	429c      	cmp	r4, r3
 800041c:	d1f5      	bne.n	800040a <HAL_GPIO_Init+0x14e>
      switch (GPIO_Init->Mode)
 800041e:	684d      	ldr	r5, [r1, #4]
 8000420:	2d12      	cmp	r5, #18
 8000422:	d0b7      	beq.n	8000394 <HAL_GPIO_Init+0xd8>
 8000424:	d894      	bhi.n	8000350 <HAL_GPIO_Init+0x94>
 8000426:	2d02      	cmp	r5, #2
 8000428:	d0b1      	beq.n	800038e <HAL_GPIO_Init+0xd2>
 800042a:	f67f af4c 	bls.w	80002c6 <HAL_GPIO_Init+0xa>
 800042e:	2d03      	cmp	r5, #3
 8000430:	d0b6      	beq.n	80003a0 <HAL_GPIO_Init+0xe4>
 8000432:	2d11      	cmp	r5, #17
 8000434:	f47f af4c 	bne.w	80002d0 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000438:	68ce      	ldr	r6, [r1, #12]
 800043a:	3604      	adds	r6, #4
          break;
 800043c:	e748      	b.n	80002d0 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800043e:	2401      	movs	r4, #1
 8000440:	e7bc      	b.n	80003bc <HAL_GPIO_Init+0x100>
 8000442:	2402      	movs	r4, #2
 8000444:	e7ba      	b.n	80003bc <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000446:	4d12      	ldr	r5, [pc, #72]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 8000448:	682c      	ldr	r4, [r5, #0]
 800044a:	ea24 0403 	bic.w	r4, r4, r3
 800044e:	602c      	str	r4, [r5, #0]
 8000450:	e7c3      	b.n	80003da <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000452:	4d0f      	ldr	r5, [pc, #60]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 8000454:	686c      	ldr	r4, [r5, #4]
 8000456:	ea24 0403 	bic.w	r4, r4, r3
 800045a:	606c      	str	r4, [r5, #4]
 800045c:	e7c5      	b.n	80003ea <HAL_GPIO_Init+0x12e>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800045e:	4d0c      	ldr	r5, [pc, #48]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 8000460:	68ac      	ldr	r4, [r5, #8]
 8000462:	ea24 0403 	bic.w	r4, r4, r3
 8000466:	60ac      	str	r4, [r5, #8]
 8000468:	e7c7      	b.n	80003fa <HAL_GPIO_Init+0x13e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800046a:	4d09      	ldr	r5, [pc, #36]	; (8000490 <HAL_GPIO_Init+0x1d4>)
 800046c:	68ec      	ldr	r4, [r5, #12]
 800046e:	ea24 0303 	bic.w	r3, r4, r3
 8000472:	60eb      	str	r3, [r5, #12]
 8000474:	e7c9      	b.n	800040a <HAL_GPIO_Init+0x14e>
  }
}
 8000476:	b002      	add	sp, #8
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000
 8000484:	40010800 	.word	0x40010800
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	40010400 	.word	0x40010400

08000494 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000494:	6803      	ldr	r3, [r0, #0]
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800049c:	d011      	beq.n	80004c2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800049e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80004a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80004a4:	2300      	movs	r3, #0
 80004a6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80004a8:	2220      	movs	r2, #32
 80004aa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80004ae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80004b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80004b4:	f042 0204 	orr.w	r2, r2, #4
 80004b8:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 80004be:	2001      	movs	r0, #1
 80004c0:	4770      	bx	lr
  }
  return HAL_OK;
 80004c2:	2000      	movs	r0, #0
}
 80004c4:	4770      	bx	lr

080004c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80004c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c8:	4606      	mov	r6, r0
 80004ca:	460c      	mov	r4, r1
 80004cc:	4617      	mov	r7, r2
 80004ce:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80004d0:	e022      	b.n	8000518 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80004d2:	f7ff fe7d 	bl	80001d0 <HAL_GetTick>
 80004d6:	9b06      	ldr	r3, [sp, #24]
 80004d8:	1ac0      	subs	r0, r0, r3
 80004da:	42a8      	cmp	r0, r5
 80004dc:	d800      	bhi.n	80004e0 <I2C_WaitOnFlagUntilTimeout+0x1a>
 80004de:	b9dd      	cbnz	r5, 8000518 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80004e4:	2220      	movs	r2, #32
 80004e6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80004ea:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80004ee:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80004f0:	f042 0220 	orr.w	r2, r2, #32
 80004f4:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80004f6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 80004fa:	2001      	movs	r0, #1
 80004fc:	e01a      	b.n	8000534 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80004fe:	6833      	ldr	r3, [r6, #0]
 8000500:	695b      	ldr	r3, [r3, #20]
 8000502:	ea24 0303 	bic.w	r3, r4, r3
 8000506:	b29b      	uxth	r3, r3
 8000508:	fab3 f383 	clz	r3, r3
 800050c:	095b      	lsrs	r3, r3, #5
 800050e:	429f      	cmp	r7, r3
 8000510:	d10f      	bne.n	8000532 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8000512:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000516:	d1dc      	bne.n	80004d2 <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000518:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800051c:	2b01      	cmp	r3, #1
 800051e:	d0ee      	beq.n	80004fe <I2C_WaitOnFlagUntilTimeout+0x38>
 8000520:	6833      	ldr	r3, [r6, #0]
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	ea24 0303 	bic.w	r3, r4, r3
 8000528:	b29b      	uxth	r3, r3
 800052a:	fab3 f383 	clz	r3, r3
 800052e:	095b      	lsrs	r3, r3, #5
 8000530:	e7ed      	b.n	800050e <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8000532:	2000      	movs	r0, #0
}
 8000534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000536 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000538:	4604      	mov	r4, r0
 800053a:	460d      	mov	r5, r1
 800053c:	4616      	mov	r6, r2
 800053e:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000540:	e03c      	b.n	80005bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000548:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000550:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000552:	2300      	movs	r3, #0
 8000554:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000556:	2220      	movs	r2, #32
 8000558:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800055c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000560:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000562:	f042 0204 	orr.w	r2, r2, #4
 8000566:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000568:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800056c:	2001      	movs	r0, #1
 800056e:	e033      	b.n	80005d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000570:	f7ff fe2e 	bl	80001d0 <HAL_GetTick>
 8000574:	1bc0      	subs	r0, r0, r7
 8000576:	42b0      	cmp	r0, r6
 8000578:	d800      	bhi.n	800057c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 800057a:	b9fe      	cbnz	r6, 80005bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000580:	2220      	movs	r2, #32
 8000582:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000586:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800058a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800058c:	f042 0220 	orr.w	r2, r2, #32
 8000590:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000592:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000596:	2001      	movs	r0, #1
 8000598:	e01e      	b.n	80005d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	ea25 0303 	bic.w	r3, r5, r3
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	3300      	adds	r3, #0
 80005a6:	bf18      	it	ne
 80005a8:	2301      	movne	r3, #1
 80005aa:	b1a3      	cbz	r3, 80005d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80005b4:	d1c5      	bne.n	8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 80005b6:	f1b6 3fff 	cmp.w	r6, #4294967295
 80005ba:	d1d9      	bne.n	8000570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80005bc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d0ea      	beq.n	800059a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	ea25 0303 	bic.w	r3, r5, r3
 80005cc:	b29b      	uxth	r3, r3
 80005ce:	3300      	adds	r3, #0
 80005d0:	bf18      	it	ne
 80005d2:	2301      	movne	r3, #1
 80005d4:	e7e9      	b.n	80005aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 80005d6:	2000      	movs	r0, #0
}
 80005d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080005dc <I2C_MasterRequestWrite>:
{
 80005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005de:	b083      	sub	sp, #12
 80005e0:	4604      	mov	r4, r0
 80005e2:	460f      	mov	r7, r1
 80005e4:	4615      	mov	r5, r2
 80005e6:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80005e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80005ea:	2b08      	cmp	r3, #8
 80005ec:	d00d      	beq.n	800060a <I2C_MasterRequestWrite+0x2e>
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d00b      	beq.n	800060a <I2C_MasterRequestWrite+0x2e>
 80005f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80005f6:	d008      	beq.n	800060a <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80005f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80005fa:	2b12      	cmp	r3, #18
 80005fc:	d10a      	bne.n	8000614 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80005fe:	6802      	ldr	r2, [r0, #0]
 8000600:	6813      	ldr	r3, [r2, #0]
 8000602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e004      	b.n	8000614 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800060a:	6822      	ldr	r2, [r4, #0]
 800060c:	6813      	ldr	r3, [r2, #0]
 800060e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000612:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000614:	9600      	str	r6, [sp, #0]
 8000616:	462b      	mov	r3, r5
 8000618:	2200      	movs	r2, #0
 800061a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800061e:	4620      	mov	r0, r4
 8000620:	f7ff ff51 	bl	80004c6 <I2C_WaitOnFlagUntilTimeout>
 8000624:	bb18      	cbnz	r0, 800066e <I2C_MasterRequestWrite+0x92>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000626:	6923      	ldr	r3, [r4, #16]
 8000628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800062c:	d10d      	bne.n	800064a <I2C_MasterRequestWrite+0x6e>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8000634:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000636:	4633      	mov	r3, r6
 8000638:	462a      	mov	r2, r5
 800063a:	4910      	ldr	r1, [pc, #64]	; (800067c <I2C_MasterRequestWrite+0xa0>)
 800063c:	4620      	mov	r0, r4
 800063e:	f7ff ff7a 	bl	8000536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000642:	4603      	mov	r3, r0
 8000644:	b1a0      	cbz	r0, 8000670 <I2C_MasterRequestWrite+0x94>
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e012      	b.n	8000670 <I2C_MasterRequestWrite+0x94>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800064a:	11fb      	asrs	r3, r7, #7
 800064c:	6822      	ldr	r2, [r4, #0]
 800064e:	f003 0306 	and.w	r3, r3, #6
 8000652:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000656:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000658:	4633      	mov	r3, r6
 800065a:	462a      	mov	r2, r5
 800065c:	4908      	ldr	r1, [pc, #32]	; (8000680 <I2C_MasterRequestWrite+0xa4>)
 800065e:	4620      	mov	r0, r4
 8000660:	f7ff ff69 	bl	8000536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000664:	b938      	cbnz	r0, 8000676 <I2C_MasterRequestWrite+0x9a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000666:	6823      	ldr	r3, [r4, #0]
 8000668:	b2ff      	uxtb	r7, r7
 800066a:	611f      	str	r7, [r3, #16]
 800066c:	e7e3      	b.n	8000636 <I2C_MasterRequestWrite+0x5a>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	b003      	add	sp, #12
 8000674:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	e7fa      	b.n	8000670 <I2C_MasterRequestWrite+0x94>
 800067a:	bf00      	nop
 800067c:	00010002 	.word	0x00010002
 8000680:	00010008 	.word	0x00010008

08000684 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4604      	mov	r4, r0
 8000688:	460d      	mov	r5, r1
 800068a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800068c:	6823      	ldr	r3, [r4, #0]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000694:	d11c      	bne.n	80006d0 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000696:	4620      	mov	r0, r4
 8000698:	f7ff fefc 	bl	8000494 <I2C_IsAcknowledgeFailed>
 800069c:	b9d0      	cbnz	r0, 80006d4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800069e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80006a2:	d0f3      	beq.n	800068c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006a4:	f7ff fd94 	bl	80001d0 <HAL_GetTick>
 80006a8:	1b80      	subs	r0, r0, r6
 80006aa:	42a8      	cmp	r0, r5
 80006ac:	d801      	bhi.n	80006b2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d1ec      	bne.n	800068c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80006b6:	2220      	movs	r2, #32
 80006b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80006bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80006c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80006c2:	f042 0220 	orr.w	r2, r2, #32
 80006c6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80006c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80006cc:	2001      	movs	r0, #1
 80006ce:	e000      	b.n	80006d2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 80006d0:	2000      	movs	r0, #0
}
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80006d4:	2001      	movs	r0, #1
 80006d6:	e7fc      	b.n	80006d2 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

080006d8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	4604      	mov	r4, r0
 80006dc:	460d      	mov	r5, r1
 80006de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80006e0:	6823      	ldr	r3, [r4, #0]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f013 0f04 	tst.w	r3, #4
 80006e8:	d11c      	bne.n	8000724 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006ea:	4620      	mov	r0, r4
 80006ec:	f7ff fed2 	bl	8000494 <I2C_IsAcknowledgeFailed>
 80006f0:	b9d0      	cbnz	r0, 8000728 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80006f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80006f6:	d0f3      	beq.n	80006e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006f8:	f7ff fd6a 	bl	80001d0 <HAL_GetTick>
 80006fc:	1b80      	subs	r0, r0, r6
 80006fe:	42a8      	cmp	r0, r5
 8000700:	d801      	bhi.n	8000706 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8000702:	2d00      	cmp	r5, #0
 8000704:	d1ec      	bne.n	80006e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000706:	2300      	movs	r3, #0
 8000708:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800070a:	2220      	movs	r2, #32
 800070c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000710:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000714:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000716:	f042 0220 	orr.w	r2, r2, #32
 800071a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800071c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8000720:	2001      	movs	r0, #1
 8000722:	e000      	b.n	8000726 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8000724:	2000      	movs	r0, #0
}
 8000726:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000728:	2001      	movs	r0, #1
 800072a:	e7fc      	b.n	8000726 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800072c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800072c:	2800      	cmp	r0, #0
 800072e:	f000 80be 	beq.w	80008ae <HAL_I2C_Init+0x182>
{
 8000732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000734:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000736:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800073a:	2b00      	cmp	r3, #0
 800073c:	d06b      	beq.n	8000816 <HAL_I2C_Init+0xea>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800073e:	2324      	movs	r3, #36	; 0x24
 8000740:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000744:	6822      	ldr	r2, [r4, #0]
 8000746:	6813      	ldr	r3, [r2, #0]
 8000748:	f023 0301 	bic.w	r3, r3, #1
 800074c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800074e:	f000 fd49 	bl	80011e4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000752:	6862      	ldr	r2, [r4, #4]
 8000754:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <HAL_I2C_Init+0x18c>)
 8000756:	429a      	cmp	r2, r3
 8000758:	d862      	bhi.n	8000820 <HAL_I2C_Init+0xf4>
 800075a:	4b58      	ldr	r3, [pc, #352]	; (80008bc <HAL_I2C_Init+0x190>)
 800075c:	4298      	cmp	r0, r3
 800075e:	bf8c      	ite	hi
 8000760:	2300      	movhi	r3, #0
 8000762:	2301      	movls	r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 80a4 	bne.w	80008b2 <HAL_I2C_Init+0x186>
  freqrange = I2C_FREQRANGE(pclk1);
 800076a:	4b55      	ldr	r3, [pc, #340]	; (80008c0 <HAL_I2C_Init+0x194>)
 800076c:	fba3 2300 	umull	r2, r3, r3, r0
 8000770:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000772:	6821      	ldr	r1, [r4, #0]
 8000774:	684a      	ldr	r2, [r1, #4]
 8000776:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800077a:	431a      	orrs	r2, r3
 800077c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800077e:	6825      	ldr	r5, [r4, #0]
 8000780:	6a2a      	ldr	r2, [r5, #32]
 8000782:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8000786:	6866      	ldr	r6, [r4, #4]
 8000788:	494b      	ldr	r1, [pc, #300]	; (80008b8 <HAL_I2C_Init+0x18c>)
 800078a:	428e      	cmp	r6, r1
 800078c:	d84e      	bhi.n	800082c <HAL_I2C_Init+0x100>
 800078e:	3301      	adds	r3, #1
 8000790:	4313      	orrs	r3, r2
 8000792:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000794:	6825      	ldr	r5, [r4, #0]
 8000796:	69e9      	ldr	r1, [r5, #28]
 8000798:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800079c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80007a0:	6863      	ldr	r3, [r4, #4]
 80007a2:	4a45      	ldr	r2, [pc, #276]	; (80008b8 <HAL_I2C_Init+0x18c>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d84b      	bhi.n	8000840 <HAL_I2C_Init+0x114>
 80007a8:	3801      	subs	r0, #1
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80007b0:	3301      	adds	r3, #1
 80007b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf38      	it	cc
 80007ba:	2304      	movcc	r3, #4
 80007bc:	430b      	orrs	r3, r1
 80007be:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80007c0:	6821      	ldr	r1, [r4, #0]
 80007c2:	680b      	ldr	r3, [r1, #0]
 80007c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80007c8:	69e2      	ldr	r2, [r4, #28]
 80007ca:	6a20      	ldr	r0, [r4, #32]
 80007cc:	4302      	orrs	r2, r0
 80007ce:	4313      	orrs	r3, r2
 80007d0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80007d2:	6821      	ldr	r1, [r4, #0]
 80007d4:	688b      	ldr	r3, [r1, #8]
 80007d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80007da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007de:	6922      	ldr	r2, [r4, #16]
 80007e0:	68e0      	ldr	r0, [r4, #12]
 80007e2:	4302      	orrs	r2, r0
 80007e4:	4313      	orrs	r3, r2
 80007e6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80007e8:	6821      	ldr	r1, [r4, #0]
 80007ea:	68cb      	ldr	r3, [r1, #12]
 80007ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007f0:	6962      	ldr	r2, [r4, #20]
 80007f2:	69a0      	ldr	r0, [r4, #24]
 80007f4:	4302      	orrs	r2, r0
 80007f6:	4313      	orrs	r3, r2
 80007f8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80007fa:	6822      	ldr	r2, [r4, #0]
 80007fc:	6813      	ldr	r3, [r2, #0]
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000804:	2000      	movs	r0, #0
 8000806:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000808:	2320      	movs	r3, #32
 800080a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800080e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000810:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8000814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000816:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800081a:	f001 f957 	bl	8001acc <HAL_I2C_MspInit>
 800081e:	e78e      	b.n	800073e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <HAL_I2C_Init+0x198>)
 8000822:	4298      	cmp	r0, r3
 8000824:	bf8c      	ite	hi
 8000826:	2300      	movhi	r3, #0
 8000828:	2301      	movls	r3, #1
 800082a:	e79b      	b.n	8000764 <HAL_I2C_Init+0x38>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800082c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000830:	fb01 f303 	mul.w	r3, r1, r3
 8000834:	4924      	ldr	r1, [pc, #144]	; (80008c8 <HAL_I2C_Init+0x19c>)
 8000836:	fba1 1303 	umull	r1, r3, r1, r3
 800083a:	099b      	lsrs	r3, r3, #6
 800083c:	3301      	adds	r3, #1
 800083e:	e7a7      	b.n	8000790 <HAL_I2C_Init+0x64>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000840:	68a2      	ldr	r2, [r4, #8]
 8000842:	b9ba      	cbnz	r2, 8000874 <HAL_I2C_Init+0x148>
 8000844:	1e46      	subs	r6, r0, #1
 8000846:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800084a:	fbb6 f6f7 	udiv	r6, r6, r7
 800084e:	3601      	adds	r6, #1
 8000850:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8000854:	fab6 f686 	clz	r6, r6
 8000858:	0976      	lsrs	r6, r6, #5
 800085a:	bb36      	cbnz	r6, 80008aa <HAL_I2C_Init+0x17e>
 800085c:	b9c2      	cbnz	r2, 8000890 <HAL_I2C_Init+0x164>
 800085e:	3801      	subs	r0, #1
 8000860:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000864:	fbb0 f3f3 	udiv	r3, r0, r3
 8000868:	3301      	adds	r3, #1
 800086a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800086e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8000872:	e7a3      	b.n	80007bc <HAL_I2C_Init+0x90>
 8000874:	1e46      	subs	r6, r0, #1
 8000876:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800087a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800087e:	fbb6 f6f7 	udiv	r6, r6, r7
 8000882:	3601      	adds	r6, #1
 8000884:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8000888:	fab6 f686 	clz	r6, r6
 800088c:	0976      	lsrs	r6, r6, #5
 800088e:	e7e4      	b.n	800085a <HAL_I2C_Init+0x12e>
 8000890:	3801      	subs	r0, #1
 8000892:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000896:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800089a:	fbb0 f2f3 	udiv	r2, r0, r3
 800089e:	3201      	adds	r2, #1
 80008a0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80008a4:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80008a8:	e788      	b.n	80007bc <HAL_I2C_Init+0x90>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e786      	b.n	80007bc <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80008ae:	2001      	movs	r0, #1
}
 80008b0:	4770      	bx	lr
    return HAL_ERROR;
 80008b2:	2001      	movs	r0, #1
 80008b4:	e7ae      	b.n	8000814 <HAL_I2C_Init+0xe8>
 80008b6:	bf00      	nop
 80008b8:	000186a0 	.word	0x000186a0
 80008bc:	001e847f 	.word	0x001e847f
 80008c0:	431bde83 	.word	0x431bde83
 80008c4:	003d08ff 	.word	0x003d08ff
 80008c8:	10624dd3 	.word	0x10624dd3

080008cc <HAL_I2C_Master_Transmit>:
{
 80008cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008d0:	b084      	sub	sp, #16
 80008d2:	4604      	mov	r4, r0
 80008d4:	460e      	mov	r6, r1
 80008d6:	4690      	mov	r8, r2
 80008d8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80008da:	f7ff fc79 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80008de:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d004      	beq.n	80008f2 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 80008e8:	2602      	movs	r6, #2
}
 80008ea:	4630      	mov	r0, r6
 80008ec:	b004      	add	sp, #16
 80008ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80008f2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80008f4:	9000      	str	r0, [sp, #0]
 80008f6:	2319      	movs	r3, #25
 80008f8:	2201      	movs	r2, #1
 80008fa:	494f      	ldr	r1, [pc, #316]	; (8000a38 <HAL_I2C_Master_Transmit+0x16c>)
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff fde2 	bl	80004c6 <I2C_WaitOnFlagUntilTimeout>
 8000902:	2800      	cmp	r0, #0
 8000904:	f040 8091 	bne.w	8000a2a <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8000908:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800090c:	2b01      	cmp	r3, #1
 800090e:	f000 808e 	beq.w	8000a2e <HAL_I2C_Master_Transmit+0x162>
 8000912:	2301      	movs	r3, #1
 8000914:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	f012 0f01 	tst.w	r2, #1
 8000920:	d103      	bne.n	800092a <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f042 0201 	orr.w	r2, r2, #1
 8000928:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800092a:	6822      	ldr	r2, [r4, #0]
 800092c:	6813      	ldr	r3, [r2, #0]
 800092e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000932:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000934:	2321      	movs	r3, #33	; 0x21
 8000936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800093a:	2310      	movs	r3, #16
 800093c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8000944:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000948:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800094a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800094c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <HAL_I2C_Master_Transmit+0x170>)
 8000950:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000952:	462b      	mov	r3, r5
 8000954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000956:	4631      	mov	r1, r6
 8000958:	4620      	mov	r0, r4
 800095a:	f7ff fe3f 	bl	80005dc <I2C_MasterRequestWrite>
 800095e:	4606      	mov	r6, r0
 8000960:	2800      	cmp	r0, #0
 8000962:	d166      	bne.n	8000a32 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000964:	2300      	movs	r3, #0
 8000966:	9303      	str	r3, [sp, #12]
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	695a      	ldr	r2, [r3, #20]
 800096c:	9203      	str	r2, [sp, #12]
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	9303      	str	r3, [sp, #12]
 8000972:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8000974:	e012      	b.n	800099c <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000978:	2b04      	cmp	r3, #4
 800097a:	d001      	beq.n	8000980 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 800097c:	2601      	movs	r6, #1
 800097e:	e7b4      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000980:	6822      	ldr	r2, [r4, #0]
 8000982:	6813      	ldr	r3, [r2, #0]
 8000984:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000988:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800098a:	2601      	movs	r6, #1
 800098c:	e7ad      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800098e:	462a      	mov	r2, r5
 8000990:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000992:	4620      	mov	r0, r4
 8000994:	f7ff fea0 	bl	80006d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8000998:	2800      	cmp	r0, #0
 800099a:	d12c      	bne.n	80009f6 <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 800099c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d035      	beq.n	8000a0e <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009a2:	462a      	mov	r2, r5
 80009a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80009a6:	4620      	mov	r0, r4
 80009a8:	f7ff fe6c 	bl	8000684 <I2C_WaitOnTXEFlagUntilTimeout>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d1e2      	bne.n	8000976 <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80009b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80009ba:	1c4b      	adds	r3, r1, #1
 80009bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80009be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009c0:	3b01      	subs	r3, #1
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80009c6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80009c8:	3b01      	subs	r3, #1
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80009ce:	6822      	ldr	r2, [r4, #0]
 80009d0:	6950      	ldr	r0, [r2, #20]
 80009d2:	f010 0f04 	tst.w	r0, #4
 80009d6:	d0da      	beq.n	800098e <HAL_I2C_Master_Transmit+0xc2>
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d0d8      	beq.n	800098e <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80009dc:	784b      	ldrb	r3, [r1, #1]
 80009de:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 80009e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80009e2:	3301      	adds	r3, #1
 80009e4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80009e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80009e8:	3b01      	subs	r3, #1
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80009ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80009f0:	3b01      	subs	r3, #1
 80009f2:	8523      	strh	r3, [r4, #40]	; 0x28
 80009f4:	e7cb      	b.n	800098e <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	d001      	beq.n	8000a00 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 80009fc:	2601      	movs	r6, #1
 80009fe:	e774      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a00:	6822      	ldr	r2, [r4, #0]
 8000a02:	6813      	ldr	r3, [r2, #0]
 8000a04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a08:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8000a0a:	2601      	movs	r6, #1
 8000a0c:	e76d      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a0e:	6822      	ldr	r2, [r4, #0]
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000a24:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000a28:	e75f      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8000a2a:	2602      	movs	r6, #2
 8000a2c:	e75d      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8000a2e:	2602      	movs	r6, #2
 8000a30:	e75b      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8000a32:	2601      	movs	r6, #1
 8000a34:	e759      	b.n	80008ea <HAL_I2C_Master_Transmit+0x1e>
 8000a36:	bf00      	nop
 8000a38:	00100002 	.word	0x00100002
 8000a3c:	ffff0000 	.word	0xffff0000

08000a40 <HAL_I2C_IsDeviceReady>:
{
 8000a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a44:	b085      	sub	sp, #20
 8000a46:	4604      	mov	r4, r0
 8000a48:	4688      	mov	r8, r1
 8000a4a:	4691      	mov	r9, r2
 8000a4c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8000a4e:	f7ff fbbf 	bl	80001d0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a52:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b20      	cmp	r3, #32
 8000a5a:	d004      	beq.n	8000a66 <HAL_I2C_IsDeviceReady+0x26>
    return HAL_BUSY;
 8000a5c:	2302      	movs	r3, #2
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	b005      	add	sp, #20
 8000a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a66:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000a68:	9000      	str	r0, [sp, #0]
 8000a6a:	2319      	movs	r3, #25
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4954      	ldr	r1, [pc, #336]	; (8000bc0 <HAL_I2C_IsDeviceReady+0x180>)
 8000a70:	4620      	mov	r0, r4
 8000a72:	f7ff fd28 	bl	80004c6 <I2C_WaitOnFlagUntilTimeout>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	f040 8097 	bne.w	8000baa <HAL_I2C_IsDeviceReady+0x16a>
    __HAL_LOCK(hi2c);
 8000a7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	f000 8094 	beq.w	8000bae <HAL_I2C_IsDeviceReady+0x16e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	f012 0f01 	tst.w	r2, #1
 8000a94:	d103      	bne.n	8000a9e <HAL_I2C_IsDeviceReady+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	f042 0201 	orr.w	r2, r2, #1
 8000a9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000a9e:	6822      	ldr	r2, [r4, #0]
 8000aa0:	6813      	ldr	r3, [r2, #0]
 8000aa2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000aa6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000aa8:	2324      	movs	r3, #36	; 0x24
 8000aaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000ab2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000ab6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8000ab8:	2701      	movs	r7, #1
 8000aba:	e034      	b.n	8000b26 <HAL_I2C_IsDeviceReady+0xe6>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000abc:	23a0      	movs	r3, #160	; 0xa0
 8000abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000aca:	6959      	ldr	r1, [r3, #20]
 8000acc:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000ad0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2ba0      	cmp	r3, #160	; 0xa0
 8000ad8:	d009      	beq.n	8000aee <HAL_I2C_IsDeviceReady+0xae>
 8000ada:	b942      	cbnz	r2, 8000aee <HAL_I2C_IsDeviceReady+0xae>
 8000adc:	b939      	cbnz	r1, 8000aee <HAL_I2C_IsDeviceReady+0xae>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8000ade:	f7ff fb77 	bl	80001d0 <HAL_GetTick>
 8000ae2:	1b80      	subs	r0, r0, r6
 8000ae4:	42a8      	cmp	r0, r5
 8000ae6:	d8e9      	bhi.n	8000abc <HAL_I2C_IsDeviceReady+0x7c>
 8000ae8:	2d00      	cmp	r5, #0
 8000aea:	d1ea      	bne.n	8000ac2 <HAL_I2C_IsDeviceReady+0x82>
 8000aec:	e7e6      	b.n	8000abc <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->State = HAL_I2C_STATE_READY;
 8000aee:	2320      	movs	r3, #32
 8000af0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000af4:	6823      	ldr	r3, [r4, #0]
 8000af6:	695a      	ldr	r2, [r3, #20]
 8000af8:	f012 0f02 	tst.w	r2, #2
 8000afc:	d131      	bne.n	8000b62 <HAL_I2C_IsDeviceReady+0x122>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b04:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000b0c:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b0e:	9600      	str	r6, [sp, #0]
 8000b10:	2319      	movs	r3, #25
 8000b12:	2201      	movs	r2, #1
 8000b14:	492a      	ldr	r1, [pc, #168]	; (8000bc0 <HAL_I2C_IsDeviceReady+0x180>)
 8000b16:	4620      	mov	r0, r4
 8000b18:	f7ff fcd5 	bl	80004c6 <I2C_WaitOnFlagUntilTimeout>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d14c      	bne.n	8000bba <HAL_I2C_IsDeviceReady+0x17a>
      I2C_Trials++;
 8000b20:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8000b22:	454f      	cmp	r7, r9
 8000b24:	d239      	bcs.n	8000b9a <HAL_I2C_IsDeviceReady+0x15a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000b26:	6822      	ldr	r2, [r4, #0]
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000b30:	9600      	str	r6, [sp, #0]
 8000b32:	462b      	mov	r3, r5
 8000b34:	2200      	movs	r2, #0
 8000b36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f7ff fcc3 	bl	80004c6 <I2C_WaitOnFlagUntilTimeout>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d136      	bne.n	8000bb2 <HAL_I2C_IsDeviceReady+0x172>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	f008 02fe 	and.w	r2, r8, #254	; 0xfe
 8000b4a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8000b4c:	f7ff fb40 	bl	80001d0 <HAL_GetTick>
 8000b50:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000b52:	6823      	ldr	r3, [r4, #0]
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000b5a:	6959      	ldr	r1, [r3, #20]
 8000b5c:	f3c1 2180 	ubfx	r1, r1, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8000b60:	e7b6      	b.n	8000ad0 <HAL_I2C_IsDeviceReady+0x90>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b68:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	9303      	str	r3, [sp, #12]
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	9203      	str	r2, [sp, #12]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	9303      	str	r3, [sp, #12]
 8000b78:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b7a:	9600      	str	r6, [sp, #0]
 8000b7c:	2319      	movs	r3, #25
 8000b7e:	2201      	movs	r2, #1
 8000b80:	490f      	ldr	r1, [pc, #60]	; (8000bc0 <HAL_I2C_IsDeviceReady+0x180>)
 8000b82:	4620      	mov	r0, r4
 8000b84:	f7ff fc9f 	bl	80004c6 <I2C_WaitOnFlagUntilTimeout>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b9a0      	cbnz	r0, 8000bb6 <HAL_I2C_IsDeviceReady+0x176>
        hi2c->State = HAL_I2C_STATE_READY;
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        return HAL_OK;
 8000b98:	e761      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e759      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8000baa:	2302      	movs	r3, #2
 8000bac:	e757      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8000bae:	2302      	movs	r3, #2
 8000bb0:	e755      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
        return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e753      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e751      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e74f      	b.n	8000a5e <HAL_I2C_IsDeviceReady+0x1e>
 8000bbe:	bf00      	nop
 8000bc0:	00100002 	.word	0x00100002

08000bc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000bc4:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <RCC_Delay+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <RCC_Delay+0x28>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0a5b      	lsrs	r3, r3, #9
 8000bd2:	fb00 f003 	mul.w	r0, r0, r3
 8000bd6:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 8000bd8:	bf00      	nop
  }
  while (Delay --);
 8000bda:	9b01      	ldr	r3, [sp, #4]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	9201      	str	r2, [sp, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f9      	bne.n	8000bd8 <RCC_Delay+0x14>
}
 8000be4:	b002      	add	sp, #8
 8000be6:	4770      	bx	lr
 8000be8:	20000020 	.word	0x20000020
 8000bec:	10624dd3 	.word	0x10624dd3

08000bf0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	f000 81f5 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x3f0>
{
 8000bf6:	b570      	push	{r4, r5, r6, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bfc:	6803      	ldr	r3, [r0, #0]
 8000bfe:	f013 0f01 	tst.w	r3, #1
 8000c02:	d02c      	beq.n	8000c5e <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c04:	4bab      	ldr	r3, [pc, #684]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d01d      	beq.n	8000c4c <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c10:	4ba8      	ldr	r3, [pc, #672]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d012      	beq.n	8000c42 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c1c:	6863      	ldr	r3, [r4, #4]
 8000c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c22:	d041      	beq.n	8000ca8 <HAL_RCC_OscConfig+0xb8>
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d155      	bne.n	8000cd4 <HAL_RCC_OscConfig+0xe4>
 8000c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c2c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e037      	b.n	8000cb2 <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c42:	4b9c      	ldr	r3, [pc, #624]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000c4a:	d0e7      	beq.n	8000c1c <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c4c:	4b99      	ldr	r3, [pc, #612]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000c54:	d003      	beq.n	8000c5e <HAL_RCC_OscConfig+0x6e>
 8000c56:	6863      	ldr	r3, [r4, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f000 81c3 	beq.w	8000fe4 <HAL_RCC_OscConfig+0x3f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	f013 0f02 	tst.w	r3, #2
 8000c64:	d076      	beq.n	8000d54 <HAL_RCC_OscConfig+0x164>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	4b93      	ldr	r3, [pc, #588]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f013 0f0c 	tst.w	r3, #12
 8000c6e:	d05f      	beq.n	8000d30 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c70:	4b90      	ldr	r3, [pc, #576]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 030c 	and.w	r3, r3, #12
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d054      	beq.n	8000d26 <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c7c:	6923      	ldr	r3, [r4, #16]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 808a 	beq.w	8000d98 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8000c84:	4b8c      	ldr	r3, [pc, #560]	; (8000eb8 <HAL_RCC_OscConfig+0x2c8>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c8a:	f7ff faa1 	bl	80001d0 <HAL_GetTick>
 8000c8e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c90:	4b88      	ldr	r3, [pc, #544]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f013 0f02 	tst.w	r3, #2
 8000c98:	d175      	bne.n	8000d86 <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fa99 	bl	80001d0 <HAL_GetTick>
 8000c9e:	1b40      	subs	r0, r0, r5
 8000ca0:	2802      	cmp	r0, #2
 8000ca2:	d9f5      	bls.n	8000c90 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	e1a0      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca8:	4a82      	ldr	r2, [pc, #520]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb0:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb2:	6863      	ldr	r3, [r4, #4]
 8000cb4:	b343      	cbz	r3, 8000d08 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fa8b 	bl	80001d0 <HAL_GetTick>
 8000cba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbc:	4b7d      	ldr	r3, [pc, #500]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000cc4:	d1cb      	bne.n	8000c5e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc6:	f7ff fa83 	bl	80001d0 <HAL_GetTick>
 8000cca:	1b40      	subs	r0, r0, r5
 8000ccc:	2864      	cmp	r0, #100	; 0x64
 8000cce:	d9f5      	bls.n	8000cbc <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	e18a      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd8:	d009      	beq.n	8000cee <HAL_RCC_OscConfig+0xfe>
 8000cda:	4b76      	ldr	r3, [pc, #472]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e7e1      	b.n	8000cb2 <HAL_RCC_OscConfig+0xc2>
 8000cee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cf2:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e7d4      	b.n	8000cb2 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000d08:	f7ff fa62 	bl	80001d0 <HAL_GetTick>
 8000d0c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	4b69      	ldr	r3, [pc, #420]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d16:	d0a2      	beq.n	8000c5e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fa5a 	bl	80001d0 <HAL_GetTick>
 8000d1c:	1b40      	subs	r0, r0, r5
 8000d1e:	2864      	cmp	r0, #100	; 0x64
 8000d20:	d9f5      	bls.n	8000d0e <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000d22:	2003      	movs	r0, #3
 8000d24:	e161      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d26:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000d2e:	d1a5      	bne.n	8000c7c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d30:	4b60      	ldr	r3, [pc, #384]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f013 0f02 	tst.w	r3, #2
 8000d38:	d004      	beq.n	8000d44 <HAL_RCC_OscConfig+0x154>
 8000d3a:	6923      	ldr	r3, [r4, #16]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d001      	beq.n	8000d44 <HAL_RCC_OscConfig+0x154>
        return HAL_ERROR;
 8000d40:	2001      	movs	r0, #1
 8000d42:	e152      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d44:	4a5b      	ldr	r2, [pc, #364]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d4c:	6961      	ldr	r1, [r4, #20]
 8000d4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d52:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	f013 0f08 	tst.w	r3, #8
 8000d5a:	d032      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d5c:	69a3      	ldr	r3, [r4, #24]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d05b      	beq.n	8000e1a <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8000d62:	4b56      	ldr	r3, [pc, #344]	; (8000ebc <HAL_RCC_OscConfig+0x2cc>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d68:	f7ff fa32 	bl	80001d0 <HAL_GetTick>
 8000d6c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d72:	f013 0f02 	tst.w	r3, #2
 8000d76:	d121      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fa2a 	bl	80001d0 <HAL_GetTick>
 8000d7c:	1b40      	subs	r0, r0, r5
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f5      	bls.n	8000d6e <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8000d82:	2003      	movs	r0, #3
 8000d84:	e131      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d86:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d8e:	6961      	ldr	r1, [r4, #20]
 8000d90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	e7dd      	b.n	8000d54 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8000d98:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_RCC_OscConfig+0x2c8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fa17 	bl	80001d0 <HAL_GetTick>
 8000da2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f013 0f02 	tst.w	r3, #2
 8000dac:	d0d2      	beq.n	8000d54 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dae:	f7ff fa0f 	bl	80001d0 <HAL_GetTick>
 8000db2:	1b40      	subs	r0, r0, r5
 8000db4:	2802      	cmp	r0, #2
 8000db6:	d9f5      	bls.n	8000da4 <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8000db8:	2003      	movs	r0, #3
 8000dba:	e116      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
      RCC_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff ff01 	bl	8000bc4 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	f013 0f04 	tst.w	r3, #4
 8000dc8:	f000 8098 	beq.w	8000efc <HAL_RCC_OscConfig+0x30c>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dcc:	4b39      	ldr	r3, [pc, #228]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000dd4:	d133      	bne.n	8000e3e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000dd8:	69da      	ldr	r2, [r3, #28]
 8000dda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000dde:	61da      	str	r2, [r3, #28]
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dea:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dec:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <HAL_RCC_OscConfig+0x2d0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000df4:	d025      	beq.n	8000e42 <HAL_RCC_OscConfig+0x252>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df6:	68e3      	ldr	r3, [r4, #12]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d036      	beq.n	8000e6a <HAL_RCC_OscConfig+0x27a>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x2aa>
 8000e00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e04:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	f022 0201 	bic.w	r2, r2, #1
 8000e0e:	621a      	str	r2, [r3, #32]
 8000e10:	6a1a      	ldr	r2, [r3, #32]
 8000e12:	f022 0204 	bic.w	r2, r2, #4
 8000e16:	621a      	str	r2, [r3, #32]
 8000e18:	e02c      	b.n	8000e74 <HAL_RCC_OscConfig+0x284>
      __HAL_RCC_LSI_DISABLE();
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <HAL_RCC_OscConfig+0x2cc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e20:	f7ff f9d6 	bl	80001d0 <HAL_GetTick>
 8000e24:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2a:	f013 0f02 	tst.w	r3, #2
 8000e2e:	d0c8      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff f9ce 	bl	80001d0 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2802      	cmp	r0, #2
 8000e38:	d9f5      	bls.n	8000e26 <HAL_RCC_OscConfig+0x236>
          return HAL_TIMEOUT;
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	e0d5      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
    FlagStatus       pwrclkchanged = RESET;
 8000e3e:	2500      	movs	r5, #0
 8000e40:	e7d4      	b.n	8000dec <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_RCC_OscConfig+0x2d0>)
 8000e44:	6813      	ldr	r3, [r2, #0]
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e4c:	f7ff f9c0 	bl	80001d0 <HAL_GetTick>
 8000e50:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_RCC_OscConfig+0x2d0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000e5a:	d1cc      	bne.n	8000df6 <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e5c:	f7ff f9b8 	bl	80001d0 <HAL_GetTick>
 8000e60:	1b80      	subs	r0, r0, r6
 8000e62:	2864      	cmp	r0, #100	; 0x64
 8000e64:	d9f5      	bls.n	8000e52 <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e0bf      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000e6c:	6a13      	ldr	r3, [r2, #32]
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e74:	68e3      	ldr	r3, [r4, #12]
 8000e76:	b37b      	cbz	r3, 8000ed8 <HAL_RCC_OscConfig+0x2e8>
      tickstart = HAL_GetTick();
 8000e78:	f7ff f9aa 	bl	80001d0 <HAL_GetTick>
 8000e7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	f013 0f02 	tst.w	r3, #2
 8000e86:	d138      	bne.n	8000efa <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e88:	f7ff f9a2 	bl	80001d0 <HAL_GetTick>
 8000e8c:	1b80      	subs	r0, r0, r6
 8000e8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e92:	4298      	cmp	r0, r3
 8000e94:	d9f3      	bls.n	8000e7e <HAL_RCC_OscConfig+0x28e>
          return HAL_TIMEOUT;
 8000e96:	2003      	movs	r0, #3
 8000e98:	e0a7      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d012      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x2d4>
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_RCC_OscConfig+0x2c4>)
 8000ea0:	6a1a      	ldr	r2, [r3, #32]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	621a      	str	r2, [r3, #32]
 8000ea8:	6a1a      	ldr	r2, [r3, #32]
 8000eaa:	f022 0204 	bic.w	r2, r2, #4
 8000eae:	621a      	str	r2, [r3, #32]
 8000eb0:	e7e0      	b.n	8000e74 <HAL_RCC_OscConfig+0x284>
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	42420000 	.word	0x42420000
 8000ebc:	42420480 	.word	0x42420480
 8000ec0:	40007000 	.word	0x40007000
 8000ec4:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000ec6:	6a1a      	ldr	r2, [r3, #32]
 8000ec8:	f042 0204 	orr.w	r2, r2, #4
 8000ecc:	621a      	str	r2, [r3, #32]
 8000ece:	6a1a      	ldr	r2, [r3, #32]
 8000ed0:	f042 0201 	orr.w	r2, r2, #1
 8000ed4:	621a      	str	r2, [r3, #32]
 8000ed6:	e7cd      	b.n	8000e74 <HAL_RCC_OscConfig+0x284>
      tickstart = HAL_GetTick();
 8000ed8:	f7ff f97a 	bl	80001d0 <HAL_GetTick>
 8000edc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ede:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	f013 0f02 	tst.w	r3, #2
 8000ee6:	d008      	beq.n	8000efa <HAL_RCC_OscConfig+0x30a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee8:	f7ff f972 	bl	80001d0 <HAL_GetTick>
 8000eec:	1b80      	subs	r0, r0, r6
 8000eee:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef2:	4298      	cmp	r0, r3
 8000ef4:	d9f3      	bls.n	8000ede <HAL_RCC_OscConfig+0x2ee>
          return HAL_TIMEOUT;
 8000ef6:	2003      	movs	r0, #3
 8000ef8:	e077      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
    if (pwrclkchanged == SET)
 8000efa:	b9e5      	cbnz	r5, 8000f36 <HAL_RCC_OscConfig+0x346>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000efc:	69e3      	ldr	r3, [r4, #28]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d072      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x3f8>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f02:	4a3d      	ldr	r2, [pc, #244]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000f04:	6852      	ldr	r2, [r2, #4]
 8000f06:	f002 020c 	and.w	r2, r2, #12
 8000f0a:	2a08      	cmp	r2, #8
 8000f0c:	d056      	beq.n	8000fbc <HAL_RCC_OscConfig+0x3cc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d017      	beq.n	8000f42 <HAL_RCC_OscConfig+0x352>
        __HAL_RCC_PLL_DISABLE();
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_RCC_OscConfig+0x40c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f18:	f7ff f95a 	bl	80001d0 <HAL_GetTick>
 8000f1c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f26:	d047      	beq.n	8000fb8 <HAL_RCC_OscConfig+0x3c8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f28:	f7ff f952 	bl	80001d0 <HAL_GetTick>
 8000f2c:	1b00      	subs	r0, r0, r4
 8000f2e:	2802      	cmp	r0, #2
 8000f30:	d9f5      	bls.n	8000f1e <HAL_RCC_OscConfig+0x32e>
            return HAL_TIMEOUT;
 8000f32:	2003      	movs	r0, #3
 8000f34:	e059      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f36:	4a30      	ldr	r2, [pc, #192]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000f38:	69d3      	ldr	r3, [r2, #28]
 8000f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	61d3      	str	r3, [r2, #28]
 8000f40:	e7dc      	b.n	8000efc <HAL_RCC_OscConfig+0x30c>
        __HAL_RCC_PLL_DISABLE();
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <HAL_RCC_OscConfig+0x40c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f48:	f7ff f942 	bl	80001d0 <HAL_GetTick>
 8000f4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f56:	d006      	beq.n	8000f66 <HAL_RCC_OscConfig+0x376>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f58:	f7ff f93a 	bl	80001d0 <HAL_GetTick>
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	d9f5      	bls.n	8000f4e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8000f62:	2003      	movs	r0, #3
 8000f64:	e041      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f66:	6a23      	ldr	r3, [r4, #32]
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d01a      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f6e:	4922      	ldr	r1, [pc, #136]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000f70:	684b      	ldr	r3, [r1, #4]
 8000f72:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000f76:	6a22      	ldr	r2, [r4, #32]
 8000f78:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000f7a:	4302      	orrs	r2, r0
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <HAL_RCC_OscConfig+0x40c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f86:	f7ff f923 	bl	80001d0 <HAL_GetTick>
 8000f8a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f94:	d10e      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff f91b 	bl	80001d0 <HAL_GetTick>
 8000f9a:	1b00      	subs	r0, r0, r4
 8000f9c:	2802      	cmp	r0, #2
 8000f9e:	d9f5      	bls.n	8000f8c <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	e022      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000fa6:	6853      	ldr	r3, [r2, #4]
 8000fa8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000fac:	68a1      	ldr	r1, [r4, #8]
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6053      	str	r3, [r2, #4]
 8000fb2:	e7dc      	b.n	8000f6e <HAL_RCC_OscConfig+0x37e>
  return HAL_OK;
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e018      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	e016      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d016      	beq.n	8000fee <HAL_RCC_OscConfig+0x3fe>
        pll_config = RCC->CFGR;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_RCC_OscConfig+0x408>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000fc8:	6a22      	ldr	r2, [r4, #32]
 8000fca:	4291      	cmp	r1, r2
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x3e2>
          return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e00b      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fd2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000fd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00a      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x402>
          return HAL_ERROR;
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e004      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
    return HAL_ERROR;
 8000fe0:	2001      	movs	r0, #1
}
 8000fe2:	4770      	bx	lr
        return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8000fe8:	2000      	movs	r0, #0
}
 8000fea:	b002      	add	sp, #8
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7fb      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
  return HAL_OK;
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	e7f9      	b.n	8000fea <HAL_RCC_OscConfig+0x3fa>
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	42420060 	.word	0x42420060

08001000 <HAL_RCC_GetSysClockFreq>:
{
 8001000:	b410      	push	{r4}
 8001002:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001004:	4c16      	ldr	r4, [pc, #88]	; (8001060 <HAL_RCC_GetSysClockFreq+0x60>)
 8001006:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800100a:	f10d 0c18 	add.w	ip, sp, #24
 800100e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001012:	8a23      	ldrh	r3, [r4, #16]
 8001014:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_RCC_GetSysClockFreq+0x64>)
 800101a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800101c:	f003 020c 	and.w	r2, r3, #12
 8001020:	2a08      	cmp	r2, #8
 8001022:	d11a      	bne.n	800105a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001024:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001028:	4462      	add	r2, ip
 800102a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800102e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001032:	d105      	bne.n	8001040 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_RCC_GetSysClockFreq+0x68>)
 8001036:	fb00 f002 	mul.w	r0, r0, r2
}
 800103a:	b007      	add	sp, #28
 800103c:	bc10      	pop	{r4}
 800103e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_RCC_GetSysClockFreq+0x64>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001048:	4463      	add	r3, ip
 800104a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_RCC_GetSysClockFreq+0x6c>)
 8001050:	fb00 f002 	mul.w	r0, r0, r2
 8001054:	fbb0 f0f3 	udiv	r0, r0, r3
 8001058:	e7ef      	b.n	800103a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800105c:	e7ed      	b.n	800103a <HAL_RCC_GetSysClockFreq+0x3a>
 800105e:	bf00      	nop
 8001060:	08001c50 	.word	0x08001c50
 8001064:	40021000 	.word	0x40021000
 8001068:	003d0900 	.word	0x003d0900
 800106c:	007a1200 	.word	0x007a1200

08001070 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001070:	2800      	cmp	r0, #0
 8001072:	f000 80a3 	beq.w	80011bc <HAL_RCC_ClockConfig+0x14c>
{
 8001076:	b570      	push	{r4, r5, r6, lr}
 8001078:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800107a:	4b52      	ldr	r3, [pc, #328]	; (80011c4 <HAL_RCC_ClockConfig+0x154>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	428b      	cmp	r3, r1
 8001084:	d20c      	bcs.n	80010a0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	4a4f      	ldr	r2, [pc, #316]	; (80011c4 <HAL_RCC_ClockConfig+0x154>)
 8001088:	6813      	ldr	r3, [r2, #0]
 800108a:	f023 0307 	bic.w	r3, r3, #7
 800108e:	430b      	orrs	r3, r1
 8001090:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	428b      	cmp	r3, r1
 800109a:	d001      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800109c:	2001      	movs	r0, #1
}
 800109e:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	f013 0f02 	tst.w	r3, #2
 80010a6:	d017      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	f013 0f04 	tst.w	r3, #4
 80010ac:	d004      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010ae:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 80010b0:	6853      	ldr	r3, [r2, #4]
 80010b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010b6:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	f013 0f08 	tst.w	r3, #8
 80010be:	d004      	beq.n	80010ca <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c0:	4a41      	ldr	r2, [pc, #260]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 80010c2:	6853      	ldr	r3, [r2, #4]
 80010c4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010c8:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 80010cc:	6853      	ldr	r3, [r2, #4]
 80010ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010d2:	68a0      	ldr	r0, [r4, #8]
 80010d4:	4303      	orrs	r3, r0
 80010d6:	6053      	str	r3, [r2, #4]
 80010d8:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f013 0f01 	tst.w	r3, #1
 80010e0:	d031      	beq.n	8001146 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e2:	6863      	ldr	r3, [r4, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d020      	beq.n	800112a <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d025      	beq.n	8001138 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	f012 0f02 	tst.w	r2, #2
 80010f4:	d064      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x150>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010f6:	4934      	ldr	r1, [pc, #208]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 80010f8:	684a      	ldr	r2, [r1, #4]
 80010fa:	f022 0203 	bic.w	r2, r2, #3
 80010fe:	4313      	orrs	r3, r2
 8001100:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001102:	f7ff f865 	bl	80001d0 <HAL_GetTick>
 8001106:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001108:	4b2f      	ldr	r3, [pc, #188]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	6862      	ldr	r2, [r4, #4]
 8001112:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001116:	d016      	beq.n	8001146 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001118:	f7ff f85a 	bl	80001d0 <HAL_GetTick>
 800111c:	1b80      	subs	r0, r0, r6
 800111e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001122:	4298      	cmp	r0, r3
 8001124:	d9f0      	bls.n	8001108 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8001126:	2003      	movs	r0, #3
 8001128:	e7b9      	b.n	800109e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001132:	d1e0      	bne.n	80010f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	e7b2      	b.n	800109e <HAL_RCC_ClockConfig+0x2e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001138:	4a23      	ldr	r2, [pc, #140]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 800113a:	6812      	ldr	r2, [r2, #0]
 800113c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001140:	d1d9      	bne.n	80010f6 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
 8001144:	e7ab      	b.n	800109e <HAL_RCC_ClockConfig+0x2e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_RCC_ClockConfig+0x154>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	42ab      	cmp	r3, r5
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_RCC_ClockConfig+0x154>)
 8001154:	6813      	ldr	r3, [r2, #0]
 8001156:	f023 0307 	bic.w	r3, r3, #7
 800115a:	432b      	orrs	r3, r5
 800115c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	42ab      	cmp	r3, r5
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0xfc>
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
 800116a:	e798      	b.n	800109e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	f013 0f04 	tst.w	r3, #4
 8001172:	d006      	beq.n	8001182 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 8001176:	6853      	ldr	r3, [r2, #4]
 8001178:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800117c:	68e1      	ldr	r1, [r4, #12]
 800117e:	430b      	orrs	r3, r1
 8001180:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001182:	6823      	ldr	r3, [r4, #0]
 8001184:	f013 0f08 	tst.w	r3, #8
 8001188:	d007      	beq.n	800119a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 800118c:	6853      	ldr	r3, [r2, #4]
 800118e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001192:	6921      	ldr	r1, [r4, #16]
 8001194:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001198:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800119a:	f7ff ff31 	bl	8001000 <HAL_RCC_GetSysClockFreq>
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x158>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x15c>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	40d8      	lsrs	r0, r3
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <HAL_RCC_ClockConfig+0x160>)
 80011ae:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_RCC_ClockConfig+0x164>)
 80011b2:	6818      	ldr	r0, [r3, #0]
 80011b4:	f7fe ffca 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 80011b8:	2000      	movs	r0, #0
 80011ba:	e770      	b.n	800109e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
}
 80011be:	4770      	bx	lr
        return HAL_ERROR;
 80011c0:	2001      	movs	r0, #1
 80011c2:	e76c      	b.n	800109e <HAL_RCC_ClockConfig+0x2e>
 80011c4:	40022000 	.word	0x40022000
 80011c8:	40021000 	.word	0x40021000
 80011cc:	08007078 	.word	0x08007078
 80011d0:	20000020 	.word	0x20000020
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetHCLKFreq>:
}
 80011d8:	4b01      	ldr	r3, [pc, #4]	; (80011e0 <HAL_RCC_GetHCLKFreq+0x8>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000020 	.word	0x20000020

080011e4 <HAL_RCC_GetPCLK1Freq>:
{
 80011e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011e6:	f7ff fff7 	bl	80011d8 <HAL_RCC_GetHCLKFreq>
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80011f2:	4a03      	ldr	r2, [pc, #12]	; (8001200 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
}
 80011f6:	40d8      	lsrs	r0, r3
 80011f8:	bd08      	pop	{r3, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	08007088 	.word	0x08007088

08001204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001204:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_GPIO_Init+0x40>)
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	f042 0220 	orr.w	r2, r2, #32
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	f002 0220 	and.w	r2, r2, #32
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	f042 0204 	orr.w	r2, r2, #4
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	f002 0204 	and.w	r2, r2, #4
 8001228:	9202      	str	r2, [sp, #8]
 800122a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	f042 0208 	orr.w	r2, r2, #8
 8001232:	619a      	str	r2, [r3, #24]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	9b03      	ldr	r3, [sp, #12]

}
 800123e:	b004      	add	sp, #16
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <MX_I2C1_Init>:
{
 8001248:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800124a:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_I2C1_Init+0x28>)
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2C1_Init+0x2c>)
 800124e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_I2C1_Init+0x30>)
 8001252:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001254:	2300      	movs	r3, #0
 8001256:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001258:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125e:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001262:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001264:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001266:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001268:	f7ff fa60 	bl	800072c <HAL_I2C_Init>
}
 800126c:	bd08      	pop	{r3, pc}
 800126e:	bf00      	nop
 8001270:	2000044c 	.word	0x2000044c
 8001274:	40005400 	.word	0x40005400
 8001278:	00061a80 	.word	0x00061a80

0800127c <SystemClock_Config>:
{
 800127c:	b530      	push	{r4, r5, lr}
 800127e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001280:	2400      	movs	r4, #0
 8001282:	9408      	str	r4, [sp, #32]
 8001284:	9409      	str	r4, [sp, #36]	; 0x24
 8001286:	940b      	str	r4, [sp, #44]	; 0x2c
 8001288:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128a:	9401      	str	r4, [sp, #4]
 800128c:	9402      	str	r4, [sp, #8]
 800128e:	9403      	str	r4, [sp, #12]
 8001290:	9404      	str	r4, [sp, #16]
 8001292:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001294:	2201      	movs	r2, #1
 8001296:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800129c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800129e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2502      	movs	r5, #2
 80012a2:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012a4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012aa:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	a806      	add	r0, sp, #24
 80012ae:	f7ff fc9f 	bl	8000bf0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b2:	230f      	movs	r3, #15
 80012b4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012be:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c0:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c2:	4629      	mov	r1, r5
 80012c4:	a801      	add	r0, sp, #4
 80012c6:	f7ff fed3 	bl	8001070 <HAL_RCC_ClockConfig>
}
 80012ca:	b011      	add	sp, #68	; 0x44
 80012cc:	bd30      	pop	{r4, r5, pc}
	...

080012d0 <main>:
{
 80012d0:	b500      	push	{lr}
 80012d2:	b083      	sub	sp, #12
  HAL_Init();
 80012d4:	f7fe ff5e 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80012d8:	f7ff ffd0 	bl	800127c <SystemClock_Config>
  MX_GPIO_Init();
 80012dc:	f7ff ff92 	bl	8001204 <MX_GPIO_Init>
  MX_I2C1_Init();
 80012e0:	f7ff ffb2 	bl	8001248 <MX_I2C1_Init>
  SSD1306_Init();  // initialise
 80012e4:	f000 fb1c 	bl	8001920 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 80012e8:	2100      	movs	r1, #0
 80012ea:	4608      	mov	r0, r1
 80012ec:	f000 f97c 	bl	80015e8 <SSD1306_GotoXY>
    SSD1306_Puts ("Text1", &Font_11x18, 1);
 80012f0:	4c78      	ldr	r4, [pc, #480]	; (80014d4 <main+0x204>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	4621      	mov	r1, r4
 80012f6:	4878      	ldr	r0, [pc, #480]	; (80014d8 <main+0x208>)
 80012f8:	f000 f9ca 	bl	8001690 <SSD1306_Puts>
    SSD1306_GotoXY (10, 30);
 80012fc:	211e      	movs	r1, #30
 80012fe:	200a      	movs	r0, #10
 8001300:	f000 f972 	bl	80015e8 <SSD1306_GotoXY>
    SSD1306_Puts ("  Text2", &Font_11x18, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	4621      	mov	r1, r4
 8001308:	4874      	ldr	r0, [pc, #464]	; (80014dc <main+0x20c>)
 800130a:	f000 f9c1 	bl	8001690 <SSD1306_Puts>
    SSD1306_UpdateScreen(); //display
 800130e:	f000 fadb 	bl	80018c8 <SSD1306_UpdateScreen>
    HAL_Delay (2000);
 8001312:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001316:	f7fe ff61 	bl	80001dc <HAL_Delay>
    SSD1306_ScrollRight(0,7);  // scroll entire screen
 800131a:	2107      	movs	r1, #7
 800131c:	2000      	movs	r0, #0
 800131e:	f000 f9f9 	bl	8001714 <SSD1306_ScrollRight>
    HAL_Delay(2000);  // 2 sec
 8001322:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001326:	f7fe ff59 	bl	80001dc <HAL_Delay>
    SSD1306_ScrollLeft(0,7);  // scroll entire screen
 800132a:	2107      	movs	r1, #7
 800132c:	2000      	movs	r0, #0
 800132e:	f000 fa1d 	bl	800176c <SSD1306_ScrollLeft>
    HAL_Delay(2000);  // 2 sec
 8001332:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001336:	f7fe ff51 	bl	80001dc <HAL_Delay>
    SSD1306_Stopscroll();
 800133a:	f000 faaf 	bl	800189c <SSD1306_Stopscroll>
    SSD1306_Clear();
 800133e:	f000 fae7 	bl	8001910 <SSD1306_Clear>
    SSD1306_DrawBitmap(0,0,logo, 128, 64, 1);
 8001342:	2401      	movs	r4, #1
 8001344:	9401      	str	r4, [sp, #4]
 8001346:	2340      	movs	r3, #64	; 0x40
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	4a64      	ldr	r2, [pc, #400]	; (80014e0 <main+0x210>)
 800134e:	2100      	movs	r1, #0
 8001350:	4608      	mov	r0, r1
 8001352:	f000 f901 	bl	8001558 <SSD1306_DrawBitmap>
    SSD1306_UpdateScreen();
 8001356:	f000 fab7 	bl	80018c8 <SSD1306_UpdateScreen>
    HAL_Delay(2000);
 800135a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800135e:	f7fe ff3d 	bl	80001dc <HAL_Delay>
    SSD1306_ScrollRight(0x00, 0x0f);    // scroll entire screen right
 8001362:	210f      	movs	r1, #15
 8001364:	2000      	movs	r0, #0
 8001366:	f000 f9d5 	bl	8001714 <SSD1306_ScrollRight>
    HAL_Delay (2000);
 800136a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800136e:	f7fe ff35 	bl	80001dc <HAL_Delay>
    SSD1306_ScrollLeft(0x00, 0x0f);  // scroll entire screen left
 8001372:	210f      	movs	r1, #15
 8001374:	2000      	movs	r0, #0
 8001376:	f000 f9f9 	bl	800176c <SSD1306_ScrollLeft>
    HAL_Delay (2000);
 800137a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800137e:	f7fe ff2d 	bl	80001dc <HAL_Delay>
    SSD1306_Scrolldiagright(0x00, 0x0f);  // scroll entire screen diagonal right
 8001382:	210f      	movs	r1, #15
 8001384:	2000      	movs	r0, #0
 8001386:	f000 fa1d 	bl	80017c4 <SSD1306_Scrolldiagright>
    HAL_Delay (2000);
 800138a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800138e:	f7fe ff25 	bl	80001dc <HAL_Delay>
    SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 8001392:	210f      	movs	r1, #15
 8001394:	2000      	movs	r0, #0
 8001396:	f000 fa4b 	bl	8001830 <SSD1306_Scrolldiagleft>
    HAL_Delay (2000);
 800139a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139e:	f7fe ff1d 	bl	80001dc <HAL_Delay>
    SSD1306_Stopscroll();   // stop scrolling. If not done, screen will keep on scrolling
 80013a2:	f000 fa7b 	bl	800189c <SSD1306_Stopscroll>
    SSD1306_InvertDisplay(1);   // invert the display
 80013a6:	4620      	mov	r0, r4
 80013a8:	f000 fa7f 	bl	80018aa <SSD1306_InvertDisplay>
    HAL_Delay(2000);
 80013ac:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013b0:	f7fe ff14 	bl	80001dc <HAL_Delay>
    SSD1306_InvertDisplay(0);  // normalize the display
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 fa78 	bl	80018aa <SSD1306_InvertDisplay>
    HAL_Delay(2000);
 80013ba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013be:	f7fe ff0d 	bl	80001dc <HAL_Delay>
	  SSD1306_Clear();
 80013c2:	f000 faa5 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 80013c6:	4e46      	ldr	r6, [pc, #280]	; (80014e0 <main+0x210>)
 80013c8:	2501      	movs	r5, #1
 80013ca:	9501      	str	r5, [sp, #4]
 80013cc:	2440      	movs	r4, #64	; 0x40
 80013ce:	9400      	str	r4, [sp, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	f506 6280 	add.w	r2, r6, #1024	; 0x400
 80013d6:	2100      	movs	r1, #0
 80013d8:	4608      	mov	r0, r1
 80013da:	f000 f8bd 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80013de:	f000 fa73 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80013e2:	f000 fa95 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 80013e6:	9501      	str	r5, [sp, #4]
 80013e8:	9400      	str	r4, [sp, #0]
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	f506 6200 	add.w	r2, r6, #2048	; 0x800
 80013f0:	2100      	movs	r1, #0
 80013f2:	4608      	mov	r0, r1
 80013f4:	f000 f8b0 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80013f8:	f000 fa66 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80013fc:	f000 fa88 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 8001400:	9501      	str	r5, [sp, #4]
 8001402:	9400      	str	r4, [sp, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	f506 6240 	add.w	r2, r6, #3072	; 0xc00
 800140a:	2100      	movs	r1, #0
 800140c:	4608      	mov	r0, r1
 800140e:	f000 f8a3 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8001412:	f000 fa59 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8001416:	f000 fa7b 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 800141a:	4e32      	ldr	r6, [pc, #200]	; (80014e4 <main+0x214>)
 800141c:	9501      	str	r5, [sp, #4]
 800141e:	9400      	str	r4, [sp, #0]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	f1a6 02f8 	sub.w	r2, r6, #248	; 0xf8
 8001426:	2100      	movs	r1, #0
 8001428:	4608      	mov	r0, r1
 800142a:	f000 f895 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800142e:	f000 fa4b 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8001432:	f000 fa6d 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 8001436:	9501      	str	r5, [sp, #4]
 8001438:	9400      	str	r4, [sp, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	f506 7242 	add.w	r2, r6, #776	; 0x308
 8001440:	2100      	movs	r1, #0
 8001442:	4608      	mov	r0, r1
 8001444:	f000 f888 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8001448:	f000 fa3e 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800144c:	f000 fa60 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 8001450:	9501      	str	r5, [sp, #4]
 8001452:	9400      	str	r4, [sp, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	f506 62e1 	add.w	r2, r6, #1800	; 0x708
 800145a:	2100      	movs	r1, #0
 800145c:	4608      	mov	r0, r1
 800145e:	f000 f87b 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8001462:	f000 fa31 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8001466:	f000 fa53 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 800146a:	9501      	str	r5, [sp, #4]
 800146c:	9400      	str	r4, [sp, #0]
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	f606 3208 	addw	r2, r6, #2824	; 0xb08
 8001474:	2100      	movs	r1, #0
 8001476:	4608      	mov	r0, r1
 8001478:	f000 f86e 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800147c:	f000 fa24 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 8001480:	f000 fa46 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 8001484:	9501      	str	r5, [sp, #4]
 8001486:	9400      	str	r4, [sp, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	f606 7208 	addw	r2, r6, #3848	; 0xf08
 800148e:	2100      	movs	r1, #0
 8001490:	4608      	mov	r0, r1
 8001492:	f000 f861 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8001496:	f000 fa17 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 800149a:	f000 fa39 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 800149e:	4e12      	ldr	r6, [pc, #72]	; (80014e8 <main+0x218>)
 80014a0:	9501      	str	r5, [sp, #4]
 80014a2:	9400      	str	r4, [sp, #0]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	f506 7204 	add.w	r2, r6, #528	; 0x210
 80014aa:	2100      	movs	r1, #0
 80014ac:	4608      	mov	r0, r1
 80014ae:	f000 f853 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80014b2:	f000 fa09 	bl	80018c8 <SSD1306_UpdateScreen>
	  SSD1306_Clear();
 80014b6:	f000 fa2b 	bl	8001910 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 80014ba:	9501      	str	r5, [sp, #4]
 80014bc:	9400      	str	r4, [sp, #0]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	f506 62c2 	add.w	r2, r6, #1552	; 0x610
 80014c4:	2100      	movs	r1, #0
 80014c6:	4608      	mov	r0, r1
 80014c8:	f000 f846 	bl	8001558 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80014cc:	f000 f9fc 	bl	80018c8 <SSD1306_UpdateScreen>
 80014d0:	e777      	b.n	80013c2 <main+0xf2>
 80014d2:	bf00      	nop
 80014d4:	20000010 	.word	0x20000010
 80014d8:	08007090 	.word	0x08007090
 80014dc:	08007098 	.word	0x08007098
 80014e0:	08004478 	.word	0x08004478
 80014e4:	08005570 	.word	0x08005570
 80014e8:	08006668 	.word	0x08006668

080014ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80014ec:	b508      	push	{r3, lr}
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014ee:	b130      	cbz	r0, 80014fe <SSD1306_Fill+0x12>
 80014f0:	21ff      	movs	r1, #255	; 0xff
 80014f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f6:	4803      	ldr	r0, [pc, #12]	; (8001504 <SSD1306_Fill+0x18>)
 80014f8:	f000 fb96 	bl	8001c28 <memset>
}
 80014fc:	bd08      	pop	{r3, pc}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80014fe:	2100      	movs	r1, #0
 8001500:	e7f7      	b.n	80014f2 <SSD1306_Fill+0x6>
 8001502:	bf00      	nop
 8001504:	20000048 	.word	0x20000048

08001508 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
	if (
 8001508:	287f      	cmp	r0, #127	; 0x7f
 800150a:	d816      	bhi.n	800153a <SSD1306_DrawPixel+0x32>
		x >= SSD1306_WIDTH ||
 800150c:	293f      	cmp	r1, #63	; 0x3f
 800150e:	d814      	bhi.n	800153a <SSD1306_DrawPixel+0x32>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001510:	4b10      	ldr	r3, [pc, #64]	; (8001554 <SSD1306_DrawPixel+0x4c>)
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	b113      	cbz	r3, 800151c <SSD1306_DrawPixel+0x14>
		color = (SSD1306_COLOR_t)!color;
 8001516:	fab2 f282 	clz	r2, r2
 800151a:	0952      	lsrs	r2, r2, #5
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800151c:	2a01      	cmp	r2, #1
 800151e:	d00d      	beq.n	800153c <SSD1306_DrawPixel+0x34>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001520:	08cb      	lsrs	r3, r1, #3
 8001522:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001526:	f001 0107 	and.w	r1, r1, #7
 800152a:	2201      	movs	r2, #1
 800152c:	408a      	lsls	r2, r1
 800152e:	4b09      	ldr	r3, [pc, #36]	; (8001554 <SSD1306_DrawPixel+0x4c>)
 8001530:	4418      	add	r0, r3
 8001532:	7a01      	ldrb	r1, [r0, #8]
 8001534:	ea21 0102 	bic.w	r1, r1, r2
 8001538:	7201      	strb	r1, [r0, #8]
	}
}
 800153a:	4770      	bx	lr
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800153c:	08cb      	lsrs	r3, r1, #3
 800153e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8001542:	f001 0107 	and.w	r1, r1, #7
 8001546:	408a      	lsls	r2, r1
 8001548:	4b02      	ldr	r3, [pc, #8]	; (8001554 <SSD1306_DrawPixel+0x4c>)
 800154a:	4418      	add	r0, r3
 800154c:	7a01      	ldrb	r1, [r0, #8]
 800154e:	4311      	orrs	r1, r2
 8001550:	7201      	strb	r1, [r0, #8]
 8001552:	4770      	bx	lr
 8001554:	20000040 	.word	0x20000040

08001558 <SSD1306_DrawBitmap>:
{
 8001558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800155c:	b083      	sub	sp, #12
 800155e:	9000      	str	r0, [sp, #0]
 8001560:	4688      	mov	r8, r1
 8001562:	4692      	mov	sl, r2
 8001564:	461f      	mov	r7, r3
 8001566:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
 800156a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800156e:	9301      	str	r3, [sp, #4]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001570:	f117 0907 	adds.w	r9, r7, #7
 8001574:	d404      	bmi.n	8001580 <SSD1306_DrawBitmap+0x28>
 8001576:	ea4f 09e9 	mov.w	r9, r9, asr #3
    for(int16_t j=0; j<h; j++, y++)
 800157a:	2600      	movs	r6, #0
    uint8_t byte = 0;
 800157c:	4635      	mov	r5, r6
    for(int16_t j=0; j<h; j++, y++)
 800157e:	e02c      	b.n	80015da <SSD1306_DrawBitmap+0x82>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001580:	f109 0907 	add.w	r9, r9, #7
 8001584:	e7f7      	b.n	8001576 <SSD1306_DrawBitmap+0x1e>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001586:	fb09 f106 	mul.w	r1, r9, r6
 800158a:	461a      	mov	r2, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	db12      	blt.n	80015b6 <SSD1306_DrawBitmap+0x5e>
 8001590:	f342 02cf 	sbfx	r2, r2, #3, #16
 8001594:	440a      	add	r2, r1
 8001596:	f81a 5002 	ldrb.w	r5, [sl, r2]
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800159a:	f015 0f80 	tst.w	r5, #128	; 0x80
 800159e:	d10c      	bne.n	80015ba <SSD1306_DrawBitmap+0x62>
        for(int16_t i=0; i<w; i++)
 80015a0:	3401      	adds	r4, #1
 80015a2:	b223      	sxth	r3, r4
 80015a4:	42bb      	cmp	r3, r7
 80015a6:	da12      	bge.n	80015ce <SSD1306_DrawBitmap+0x76>
            if(i & 7)
 80015a8:	b29c      	uxth	r4, r3
 80015aa:	f014 0f07 	tst.w	r4, #7
 80015ae:	d0ea      	beq.n	8001586 <SSD1306_DrawBitmap+0x2e>
               byte <<= 1;
 80015b0:	006d      	lsls	r5, r5, #1
 80015b2:	b2ed      	uxtb	r5, r5
 80015b4:	e7f1      	b.n	800159a <SSD1306_DrawBitmap+0x42>
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80015b6:	1dda      	adds	r2, r3, #7
 80015b8:	e7ea      	b.n	8001590 <SSD1306_DrawBitmap+0x38>
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	18e0      	adds	r0, r4, r3
 80015be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80015c2:	fa1f f188 	uxth.w	r1, r8
 80015c6:	b280      	uxth	r0, r0
 80015c8:	f7ff ff9e 	bl	8001508 <SSD1306_DrawPixel>
 80015cc:	e7e8      	b.n	80015a0 <SSD1306_DrawBitmap+0x48>
    for(int16_t j=0; j<h; j++, y++)
 80015ce:	3601      	adds	r6, #1
 80015d0:	b236      	sxth	r6, r6
 80015d2:	f108 0801 	add.w	r8, r8, #1
 80015d6:	fa0f f888 	sxth.w	r8, r8
 80015da:	455e      	cmp	r6, fp
 80015dc:	da01      	bge.n	80015e2 <SSD1306_DrawBitmap+0x8a>
        for(int16_t i=0; i<w; i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	e7e0      	b.n	80015a4 <SSD1306_DrawBitmap+0x4c>
}
 80015e2:	b003      	add	sp, #12
 80015e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015e8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80015e8:	4b01      	ldr	r3, [pc, #4]	; (80015f0 <SSD1306_GotoXY+0x8>)
 80015ea:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 80015ec:	8059      	strh	r1, [r3, #2]
}
 80015ee:	4770      	bx	lr
 80015f0:	20000040 	.word	0x20000040

080015f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <SSD1306_Putc+0x98>)
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	780c      	ldrb	r4, [r1, #0]
 80015fe:	4423      	add	r3, r4
	if (
 8001600:	2b7f      	cmp	r3, #127	; 0x7f
 8001602:	dc3e      	bgt.n	8001682 <SSD1306_Putc+0x8e>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001604:	4b21      	ldr	r3, [pc, #132]	; (800168c <SSD1306_Putc+0x98>)
 8001606:	885b      	ldrh	r3, [r3, #2]
 8001608:	784c      	ldrb	r4, [r1, #1]
 800160a:	4423      	add	r3, r4
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800160c:	2b3f      	cmp	r3, #63	; 0x3f
 800160e:	dc3b      	bgt.n	8001688 <SSD1306_Putc+0x94>
 8001610:	4690      	mov	r8, r2
 8001612:	460d      	mov	r5, r1
 8001614:	4681      	mov	r9, r0
		/* Error */
		return 0;
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001616:	2600      	movs	r6, #0
 8001618:	e020      	b.n	800165c <SSD1306_Putc+0x68>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
		for (j = 0; j < Font->FontWidth; j++) {
			if ((b << j) & 0x8000) {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <SSD1306_Putc+0x98>)
 800161c:	8818      	ldrh	r0, [r3, #0]
 800161e:	8859      	ldrh	r1, [r3, #2]
 8001620:	4431      	add	r1, r6
 8001622:	4420      	add	r0, r4
 8001624:	fab8 f288 	clz	r2, r8
 8001628:	0952      	lsrs	r2, r2, #5
 800162a:	b289      	uxth	r1, r1
 800162c:	b280      	uxth	r0, r0
 800162e:	f7ff ff6b 	bl	8001508 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001632:	3401      	adds	r4, #1
 8001634:	782b      	ldrb	r3, [r5, #0]
 8001636:	42a3      	cmp	r3, r4
 8001638:	d90f      	bls.n	800165a <SSD1306_Putc+0x66>
			if ((b << j) & 0x8000) {
 800163a:	fa07 f304 	lsl.w	r3, r7, r4
 800163e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001642:	d0ea      	beq.n	800161a <SSD1306_Putc+0x26>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <SSD1306_Putc+0x98>)
 8001646:	8818      	ldrh	r0, [r3, #0]
 8001648:	8859      	ldrh	r1, [r3, #2]
 800164a:	4431      	add	r1, r6
 800164c:	4420      	add	r0, r4
 800164e:	4642      	mov	r2, r8
 8001650:	b289      	uxth	r1, r1
 8001652:	b280      	uxth	r0, r0
 8001654:	f7ff ff58 	bl	8001508 <SSD1306_DrawPixel>
 8001658:	e7eb      	b.n	8001632 <SSD1306_Putc+0x3e>
	for (i = 0; i < Font->FontHeight; i++) {
 800165a:	3601      	adds	r6, #1
 800165c:	786a      	ldrb	r2, [r5, #1]
 800165e:	42b2      	cmp	r2, r6
 8001660:	d908      	bls.n	8001674 <SSD1306_Putc+0x80>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001662:	6869      	ldr	r1, [r5, #4]
 8001664:	f1a9 0320 	sub.w	r3, r9, #32
 8001668:	fb02 6303 	mla	r3, r2, r3, r6
 800166c:	f831 7013 	ldrh.w	r7, [r1, r3, lsl #1]
		for (j = 0; j < Font->FontWidth; j++) {
 8001670:	2400      	movs	r4, #0
 8001672:	e7df      	b.n	8001634 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001674:	782b      	ldrb	r3, [r5, #0]
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <SSD1306_Putc+0x98>)
 8001678:	8811      	ldrh	r1, [r2, #0]
 800167a:	440b      	add	r3, r1
 800167c:	8013      	strh	r3, [r2, #0]
	
	/* Return character written */
	return ch;
 800167e:	4648      	mov	r0, r9
 8001680:	e000      	b.n	8001684 <SSD1306_Putc+0x90>
		return 0;
 8001682:	2000      	movs	r0, #0
}
 8001684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
 8001688:	2000      	movs	r0, #0
 800168a:	e7fb      	b.n	8001684 <SSD1306_Putc+0x90>
 800168c:	20000040 	.word	0x20000040

08001690 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	4604      	mov	r4, r0
 8001694:	460e      	mov	r6, r1
 8001696:	4615      	mov	r5, r2
	/* Write characters */
	while (*str) {
 8001698:	7823      	ldrb	r3, [r4, #0]
 800169a:	b14b      	cbz	r3, 80016b0 <SSD1306_Puts+0x20>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800169c:	462a      	mov	r2, r5
 800169e:	4631      	mov	r1, r6
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ffa7 	bl	80015f4 <SSD1306_Putc>
 80016a6:	7823      	ldrb	r3, [r4, #0]
 80016a8:	4298      	cmp	r0, r3
 80016aa:	d101      	bne.n	80016b0 <SSD1306_Puts+0x20>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 80016ac:	3401      	adds	r4, #1
 80016ae:	e7f3      	b.n	8001698 <SSD1306_Puts+0x8>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd70      	pop	{r4, r5, r6, pc}

080016b4 <ssd1306_I2C_WriteMulti>:
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80016b4:	b530      	push	{r4, r5, lr}
 80016b6:	b0c3      	sub	sp, #268	; 0x10c
uint8_t dt[256];
dt[0] = reg;
 80016b8:	f88d 1008 	strb.w	r1, [sp, #8]
uint8_t i;
for(i = 0; i < count; i++)
 80016bc:	2100      	movs	r1, #0
 80016be:	e004      	b.n	80016ca <ssd1306_I2C_WriteMulti+0x16>
dt[i+1] = data[i];
 80016c0:	1c4c      	adds	r4, r1, #1
 80016c2:	5c55      	ldrb	r5, [r2, r1]
 80016c4:	a902      	add	r1, sp, #8
 80016c6:	550d      	strb	r5, [r1, r4]
for(i = 0; i < count; i++)
 80016c8:	b2e1      	uxtb	r1, r4
 80016ca:	b28c      	uxth	r4, r1
 80016cc:	429c      	cmp	r4, r3
 80016ce:	d3f7      	bcc.n	80016c0 <ssd1306_I2C_WriteMulti+0xc>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016d0:	3301      	adds	r3, #1
 80016d2:	220a      	movs	r2, #10
 80016d4:	9200      	str	r2, [sp, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	aa02      	add	r2, sp, #8
 80016da:	4601      	mov	r1, r0
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <ssd1306_I2C_WriteMulti+0x34>)
 80016de:	f7ff f8f5 	bl	80008cc <HAL_I2C_Master_Transmit>
}
 80016e2:	b043      	add	sp, #268	; 0x10c
 80016e4:	bd30      	pop	{r4, r5, pc}
 80016e6:	bf00      	nop
 80016e8:	2000044c 	.word	0x2000044c

080016ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016ec:	b500      	push	{lr}
 80016ee:	b085      	sub	sp, #20
	uint8_t dt[2];
	dt[0] = reg;
 80016f0:	f88d 100c 	strb.w	r1, [sp, #12]
	dt[1] = data;
 80016f4:	f88d 200d 	strb.w	r2, [sp, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80016f8:	230a      	movs	r3, #10
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2302      	movs	r3, #2
 80016fe:	aa03      	add	r2, sp, #12
 8001700:	4601      	mov	r1, r0
 8001702:	4803      	ldr	r0, [pc, #12]	; (8001710 <ssd1306_I2C_Write+0x24>)
 8001704:	f7ff f8e2 	bl	80008cc <HAL_I2C_Master_Transmit>
}
 8001708:	b005      	add	sp, #20
 800170a:	f85d fb04 	ldr.w	pc, [sp], #4
 800170e:	bf00      	nop
 8001710:	2000044c 	.word	0x2000044c

08001714 <SSD1306_ScrollRight>:
{
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	4605      	mov	r5, r0
 8001718:	460c      	mov	r4, r1
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800171a:	2226      	movs	r2, #38	; 0x26
 800171c:	2100      	movs	r1, #0
 800171e:	2078      	movs	r0, #120	; 0x78
 8001720:	f7ff ffe4 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001724:	2200      	movs	r2, #0
 8001726:	4611      	mov	r1, r2
 8001728:	2078      	movs	r0, #120	; 0x78
 800172a:	f7ff ffdf 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800172e:	462a      	mov	r2, r5
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	; 0x78
 8001734:	f7ff ffda 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001738:	2200      	movs	r2, #0
 800173a:	4611      	mov	r1, r2
 800173c:	2078      	movs	r0, #120	; 0x78
 800173e:	f7ff ffd5 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001742:	4622      	mov	r2, r4
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	; 0x78
 8001748:	f7ff ffd0 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800174c:	2200      	movs	r2, #0
 800174e:	4611      	mov	r1, r2
 8001750:	2078      	movs	r0, #120	; 0x78
 8001752:	f7ff ffcb 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001756:	22ff      	movs	r2, #255	; 0xff
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	; 0x78
 800175c:	f7ff ffc6 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001760:	222f      	movs	r2, #47	; 0x2f
 8001762:	2100      	movs	r1, #0
 8001764:	2078      	movs	r0, #120	; 0x78
 8001766:	f7ff ffc1 	bl	80016ec <ssd1306_I2C_Write>
}
 800176a:	bd38      	pop	{r3, r4, r5, pc}

0800176c <SSD1306_ScrollLeft>:
{
 800176c:	b538      	push	{r3, r4, r5, lr}
 800176e:	4605      	mov	r5, r0
 8001770:	460c      	mov	r4, r1
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8001772:	2227      	movs	r2, #39	; 0x27
 8001774:	2100      	movs	r1, #0
 8001776:	2078      	movs	r0, #120	; 0x78
 8001778:	f7ff ffb8 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800177c:	2200      	movs	r2, #0
 800177e:	4611      	mov	r1, r2
 8001780:	2078      	movs	r0, #120	; 0x78
 8001782:	f7ff ffb3 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8001786:	462a      	mov	r2, r5
 8001788:	2100      	movs	r1, #0
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f7ff ffae 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8001790:	2200      	movs	r2, #0
 8001792:	4611      	mov	r1, r2
 8001794:	2078      	movs	r0, #120	; 0x78
 8001796:	f7ff ffa9 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800179a:	4622      	mov	r2, r4
 800179c:	2100      	movs	r1, #0
 800179e:	2078      	movs	r0, #120	; 0x78
 80017a0:	f7ff ffa4 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80017a4:	2200      	movs	r2, #0
 80017a6:	4611      	mov	r1, r2
 80017a8:	2078      	movs	r0, #120	; 0x78
 80017aa:	f7ff ff9f 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80017ae:	22ff      	movs	r2, #255	; 0xff
 80017b0:	2100      	movs	r1, #0
 80017b2:	2078      	movs	r0, #120	; 0x78
 80017b4:	f7ff ff9a 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80017b8:	222f      	movs	r2, #47	; 0x2f
 80017ba:	2100      	movs	r1, #0
 80017bc:	2078      	movs	r0, #120	; 0x78
 80017be:	f7ff ff95 	bl	80016ec <ssd1306_I2C_Write>
}
 80017c2:	bd38      	pop	{r3, r4, r5, pc}

080017c4 <SSD1306_Scrolldiagright>:
{
 80017c4:	b538      	push	{r3, r4, r5, lr}
 80017c6:	4605      	mov	r5, r0
 80017c8:	460c      	mov	r4, r1
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80017ca:	22a3      	movs	r2, #163	; 0xa3
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	; 0x78
 80017d0:	f7ff ff8c 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80017d4:	2200      	movs	r2, #0
 80017d6:	4611      	mov	r1, r2
 80017d8:	2078      	movs	r0, #120	; 0x78
 80017da:	f7ff ff87 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80017de:	2240      	movs	r2, #64	; 0x40
 80017e0:	2100      	movs	r1, #0
 80017e2:	2078      	movs	r0, #120	; 0x78
 80017e4:	f7ff ff82 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 80017e8:	2229      	movs	r2, #41	; 0x29
 80017ea:	2100      	movs	r1, #0
 80017ec:	2078      	movs	r0, #120	; 0x78
 80017ee:	f7ff ff7d 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 80017f2:	2200      	movs	r2, #0
 80017f4:	4611      	mov	r1, r2
 80017f6:	2078      	movs	r0, #120	; 0x78
 80017f8:	f7ff ff78 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 80017fc:	462a      	mov	r2, r5
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	; 0x78
 8001802:	f7ff ff73 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001806:	2200      	movs	r2, #0
 8001808:	4611      	mov	r1, r2
 800180a:	2078      	movs	r0, #120	; 0x78
 800180c:	f7ff ff6e 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8001810:	4622      	mov	r2, r4
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	; 0x78
 8001816:	f7ff ff69 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 800181a:	2201      	movs	r2, #1
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	; 0x78
 8001820:	f7ff ff64 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8001824:	222f      	movs	r2, #47	; 0x2f
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	; 0x78
 800182a:	f7ff ff5f 	bl	80016ec <ssd1306_I2C_Write>
}
 800182e:	bd38      	pop	{r3, r4, r5, pc}

08001830 <SSD1306_Scrolldiagleft>:
{
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4605      	mov	r5, r0
 8001834:	460c      	mov	r4, r1
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8001836:	22a3      	movs	r2, #163	; 0xa3
 8001838:	2100      	movs	r1, #0
 800183a:	2078      	movs	r0, #120	; 0x78
 800183c:	f7ff ff56 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 8001840:	2200      	movs	r2, #0
 8001842:	4611      	mov	r1, r2
 8001844:	2078      	movs	r0, #120	; 0x78
 8001846:	f7ff ff51 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 800184a:	2240      	movs	r2, #64	; 0x40
 800184c:	2100      	movs	r1, #0
 800184e:	2078      	movs	r0, #120	; 0x78
 8001850:	f7ff ff4c 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 8001854:	222a      	movs	r2, #42	; 0x2a
 8001856:	2100      	movs	r1, #0
 8001858:	2078      	movs	r0, #120	; 0x78
 800185a:	f7ff ff47 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 800185e:	2200      	movs	r2, #0
 8001860:	4611      	mov	r1, r2
 8001862:	2078      	movs	r0, #120	; 0x78
 8001864:	f7ff ff42 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8001868:	462a      	mov	r2, r5
 800186a:	2100      	movs	r1, #0
 800186c:	2078      	movs	r0, #120	; 0x78
 800186e:	f7ff ff3d 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001872:	2200      	movs	r2, #0
 8001874:	4611      	mov	r1, r2
 8001876:	2078      	movs	r0, #120	; 0x78
 8001878:	f7ff ff38 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 800187c:	4622      	mov	r2, r4
 800187e:	2100      	movs	r1, #0
 8001880:	2078      	movs	r0, #120	; 0x78
 8001882:	f7ff ff33 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8001886:	2201      	movs	r2, #1
 8001888:	2100      	movs	r1, #0
 800188a:	2078      	movs	r0, #120	; 0x78
 800188c:	f7ff ff2e 	bl	80016ec <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 8001890:	222f      	movs	r2, #47	; 0x2f
 8001892:	2100      	movs	r1, #0
 8001894:	2078      	movs	r0, #120	; 0x78
 8001896:	f7ff ff29 	bl	80016ec <ssd1306_I2C_Write>
}
 800189a:	bd38      	pop	{r3, r4, r5, pc}

0800189c <SSD1306_Stopscroll>:
{
 800189c:	b508      	push	{r3, lr}
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800189e:	222e      	movs	r2, #46	; 0x2e
 80018a0:	2100      	movs	r1, #0
 80018a2:	2078      	movs	r0, #120	; 0x78
 80018a4:	f7ff ff22 	bl	80016ec <ssd1306_I2C_Write>
}
 80018a8:	bd08      	pop	{r3, pc}

080018aa <SSD1306_InvertDisplay>:
{
 80018aa:	b508      	push	{r3, lr}
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80018ac:	b928      	cbnz	r0, 80018ba <SSD1306_InvertDisplay+0x10>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80018ae:	22a6      	movs	r2, #166	; 0xa6
 80018b0:	2100      	movs	r1, #0
 80018b2:	2078      	movs	r0, #120	; 0x78
 80018b4:	f7ff ff1a 	bl	80016ec <ssd1306_I2C_Write>
}
 80018b8:	bd08      	pop	{r3, pc}
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80018ba:	22a7      	movs	r2, #167	; 0xa7
 80018bc:	2100      	movs	r1, #0
 80018be:	2078      	movs	r0, #120	; 0x78
 80018c0:	f7ff ff14 	bl	80016ec <ssd1306_I2C_Write>
 80018c4:	e7f8      	b.n	80018b8 <SSD1306_InvertDisplay+0xe>
	...

080018c8 <SSD1306_UpdateScreen>:
void SSD1306_UpdateScreen(void) {
 80018c8:	b510      	push	{r4, lr}
	for (m = 0; m < 8; m++) {
 80018ca:	2400      	movs	r4, #0
 80018cc:	e01a      	b.n	8001904 <SSD1306_UpdateScreen+0x3c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018ce:	f1a4 0250 	sub.w	r2, r4, #80	; 0x50
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	2100      	movs	r1, #0
 80018d6:	2078      	movs	r0, #120	; 0x78
 80018d8:	f7ff ff08 	bl	80016ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018dc:	2200      	movs	r2, #0
 80018de:	4611      	mov	r1, r2
 80018e0:	2078      	movs	r0, #120	; 0x78
 80018e2:	f7ff ff03 	bl	80016ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018e6:	2210      	movs	r2, #16
 80018e8:	2100      	movs	r1, #0
 80018ea:	2078      	movs	r0, #120	; 0x78
 80018ec:	f7ff fefe 	bl	80016ec <ssd1306_I2C_Write>
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	4a06      	ldr	r2, [pc, #24]	; (800190c <SSD1306_UpdateScreen+0x44>)
 80018f4:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
 80018f8:	2140      	movs	r1, #64	; 0x40
 80018fa:	2078      	movs	r0, #120	; 0x78
 80018fc:	f7ff feda 	bl	80016b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001900:	3401      	adds	r4, #1
 8001902:	b2e4      	uxtb	r4, r4
 8001904:	2c07      	cmp	r4, #7
 8001906:	d9e2      	bls.n	80018ce <SSD1306_UpdateScreen+0x6>
}
 8001908:	bd10      	pop	{r4, pc}
 800190a:	bf00      	nop
 800190c:	20000048 	.word	0x20000048

08001910 <SSD1306_Clear>:
{
 8001910:	b508      	push	{r3, lr}
	SSD1306_Fill (0);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fdea 	bl	80014ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001918:	f7ff ffd6 	bl	80018c8 <SSD1306_UpdateScreen>
}
 800191c:	bd08      	pop	{r3, pc}
	...

08001920 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 8001920:	b508      	push	{r3, lr}
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001922:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001926:	2201      	movs	r2, #1
 8001928:	2178      	movs	r1, #120	; 0x78
 800192a:	4855      	ldr	r0, [pc, #340]	; (8001a80 <SSD1306_Init+0x160>)
 800192c:	f7ff f888 	bl	8000a40 <HAL_I2C_IsDeviceReady>
 8001930:	2800      	cmp	r0, #0
 8001932:	f040 80a3 	bne.w	8001a7c <SSD1306_Init+0x15c>
	uint32_t p = 2500;
 8001936:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800193a:	e000      	b.n	800193e <SSD1306_Init+0x1e>
		p--;
 800193c:	3b01      	subs	r3, #1
	while(p>0)
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1fc      	bne.n	800193c <SSD1306_Init+0x1c>
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001942:	22ae      	movs	r2, #174	; 0xae
 8001944:	2100      	movs	r1, #0
 8001946:	2078      	movs	r0, #120	; 0x78
 8001948:	f7ff fed0 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800194c:	2220      	movs	r2, #32
 800194e:	2100      	movs	r1, #0
 8001950:	2078      	movs	r0, #120	; 0x78
 8001952:	f7ff fecb 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001956:	2210      	movs	r2, #16
 8001958:	2100      	movs	r1, #0
 800195a:	2078      	movs	r0, #120	; 0x78
 800195c:	f7ff fec6 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001960:	22b0      	movs	r2, #176	; 0xb0
 8001962:	2100      	movs	r1, #0
 8001964:	2078      	movs	r0, #120	; 0x78
 8001966:	f7ff fec1 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800196a:	22c8      	movs	r2, #200	; 0xc8
 800196c:	2100      	movs	r1, #0
 800196e:	2078      	movs	r0, #120	; 0x78
 8001970:	f7ff febc 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001974:	2200      	movs	r2, #0
 8001976:	4611      	mov	r1, r2
 8001978:	2078      	movs	r0, #120	; 0x78
 800197a:	f7ff feb7 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800197e:	2210      	movs	r2, #16
 8001980:	2100      	movs	r1, #0
 8001982:	2078      	movs	r0, #120	; 0x78
 8001984:	f7ff feb2 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001988:	2240      	movs	r2, #64	; 0x40
 800198a:	2100      	movs	r1, #0
 800198c:	2078      	movs	r0, #120	; 0x78
 800198e:	f7ff fead 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001992:	2281      	movs	r2, #129	; 0x81
 8001994:	2100      	movs	r1, #0
 8001996:	2078      	movs	r0, #120	; 0x78
 8001998:	f7ff fea8 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800199c:	22ff      	movs	r2, #255	; 0xff
 800199e:	2100      	movs	r1, #0
 80019a0:	2078      	movs	r0, #120	; 0x78
 80019a2:	f7ff fea3 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019a6:	22a1      	movs	r2, #161	; 0xa1
 80019a8:	2100      	movs	r1, #0
 80019aa:	2078      	movs	r0, #120	; 0x78
 80019ac:	f7ff fe9e 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019b0:	22a6      	movs	r2, #166	; 0xa6
 80019b2:	2100      	movs	r1, #0
 80019b4:	2078      	movs	r0, #120	; 0x78
 80019b6:	f7ff fe99 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019ba:	22a8      	movs	r2, #168	; 0xa8
 80019bc:	2100      	movs	r1, #0
 80019be:	2078      	movs	r0, #120	; 0x78
 80019c0:	f7ff fe94 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80019c4:	223f      	movs	r2, #63	; 0x3f
 80019c6:	2100      	movs	r1, #0
 80019c8:	2078      	movs	r0, #120	; 0x78
 80019ca:	f7ff fe8f 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019ce:	22a4      	movs	r2, #164	; 0xa4
 80019d0:	2100      	movs	r1, #0
 80019d2:	2078      	movs	r0, #120	; 0x78
 80019d4:	f7ff fe8a 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80019d8:	22d3      	movs	r2, #211	; 0xd3
 80019da:	2100      	movs	r1, #0
 80019dc:	2078      	movs	r0, #120	; 0x78
 80019de:	f7ff fe85 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80019e2:	2200      	movs	r2, #0
 80019e4:	4611      	mov	r1, r2
 80019e6:	2078      	movs	r0, #120	; 0x78
 80019e8:	f7ff fe80 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80019ec:	22d5      	movs	r2, #213	; 0xd5
 80019ee:	2100      	movs	r1, #0
 80019f0:	2078      	movs	r0, #120	; 0x78
 80019f2:	f7ff fe7b 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80019f6:	22f0      	movs	r2, #240	; 0xf0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2078      	movs	r0, #120	; 0x78
 80019fc:	f7ff fe76 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a00:	22d9      	movs	r2, #217	; 0xd9
 8001a02:	2100      	movs	r1, #0
 8001a04:	2078      	movs	r0, #120	; 0x78
 8001a06:	f7ff fe71 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a0a:	2222      	movs	r2, #34	; 0x22
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2078      	movs	r0, #120	; 0x78
 8001a10:	f7ff fe6c 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a14:	22da      	movs	r2, #218	; 0xda
 8001a16:	2100      	movs	r1, #0
 8001a18:	2078      	movs	r0, #120	; 0x78
 8001a1a:	f7ff fe67 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a1e:	2212      	movs	r2, #18
 8001a20:	2100      	movs	r1, #0
 8001a22:	2078      	movs	r0, #120	; 0x78
 8001a24:	f7ff fe62 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a28:	22db      	movs	r2, #219	; 0xdb
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2078      	movs	r0, #120	; 0x78
 8001a2e:	f7ff fe5d 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a32:	2220      	movs	r2, #32
 8001a34:	2100      	movs	r1, #0
 8001a36:	2078      	movs	r0, #120	; 0x78
 8001a38:	f7ff fe58 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a3c:	228d      	movs	r2, #141	; 0x8d
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2078      	movs	r0, #120	; 0x78
 8001a42:	f7ff fe53 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a46:	2214      	movs	r2, #20
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2078      	movs	r0, #120	; 0x78
 8001a4c:	f7ff fe4e 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a50:	22af      	movs	r2, #175	; 0xaf
 8001a52:	2100      	movs	r1, #0
 8001a54:	2078      	movs	r0, #120	; 0x78
 8001a56:	f7ff fe49 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001a5a:	222e      	movs	r2, #46	; 0x2e
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2078      	movs	r0, #120	; 0x78
 8001a60:	f7ff fe44 	bl	80016ec <ssd1306_I2C_Write>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a64:	2000      	movs	r0, #0
 8001a66:	f7ff fd41 	bl	80014ec <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001a6a:	f7ff ff2d 	bl	80018c8 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SSD1306_Init+0x164>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001a74:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001a76:	2001      	movs	r0, #1
 8001a78:	7158      	strb	r0, [r3, #5]
}
 8001a7a:	bd08      	pop	{r3, pc}
		return 0;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e7fc      	b.n	8001a7a <SSD1306_Init+0x15a>
 8001a80:	2000044c 	.word	0x2000044c
 8001a84:	20000040 	.word	0x20000040

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_MspInit+0x3c>)
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	619a      	str	r2, [r3, #24]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	f002 0201 	and.w	r2, r2, #1
 8001a9a:	9200      	str	r2, [sp, #0]
 8001a9c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aa4:	61da      	str	r2, [r3, #28]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab0:	4a05      	ldr	r2, [pc, #20]	; (8001ac8 <HAL_MspInit+0x40>)
 8001ab2:	6853      	ldr	r3, [r2, #4]
 8001ab4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ab8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001abc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	b002      	add	sp, #8
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b510      	push	{r4, lr}
 8001ace:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	9304      	str	r3, [sp, #16]
 8001ad8:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001ada:	6802      	ldr	r2, [r0, #0]
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_I2C_MspInit+0x58>)
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ae2:	b006      	add	sp, #24
 8001ae4:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4c10      	ldr	r4, [pc, #64]	; (8001b28 <HAL_I2C_MspInit+0x5c>)
 8001ae8:	69a3      	ldr	r3, [r4, #24]
 8001aea:	f043 0308 	orr.w	r3, r3, #8
 8001aee:	61a3      	str	r3, [r4, #24]
 8001af0:	69a3      	ldr	r3, [r4, #24]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afa:	23c0      	movs	r3, #192	; 0xc0
 8001afc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afe:	2312      	movs	r3, #18
 8001b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	a902      	add	r1, sp, #8
 8001b08:	4808      	ldr	r0, [pc, #32]	; (8001b2c <HAL_I2C_MspInit+0x60>)
 8001b0a:	f7fe fbd7 	bl	80002bc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b0e:	69e3      	ldr	r3, [r4, #28]
 8001b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b14:	61e3      	str	r3, [r4, #28]
 8001b16:	69e3      	ldr	r3, [r4, #28]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	9b01      	ldr	r3, [sp, #4]
}
 8001b20:	e7df      	b.n	8001ae2 <HAL_I2C_MspInit+0x16>
 8001b22:	bf00      	nop
 8001b24:	40005400 	.word	0x40005400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010c00 	.word	0x40010c00

08001b30 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b30:	4770      	bx	lr

08001b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	e7fe      	b.n	8001b34 <MemManage_Handler>

08001b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b36:	e7fe      	b.n	8001b36 <BusFault_Handler>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler>

08001b3a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	4770      	bx	lr

08001b3c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b3c:	4770      	bx	lr

08001b3e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b42:	f7fe fb39 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b46:	bd08      	pop	{r3, pc}

08001b48 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <SystemInit+0x40>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <SystemInit+0x44>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b64:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001b74:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b76:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b7a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SystemInit+0x48>)
 8001b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b82:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	f8ff0000 	.word	0xf8ff0000
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b96:	e003      	b.n	8001ba0 <LoopCopyDataInit>

08001b98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b9e:	3104      	adds	r1, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ba0:	480a      	ldr	r0, [pc, #40]	; (8001bcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001ba4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001ba6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001ba8:	d3f6      	bcc.n	8001b98 <CopyDataInit>
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bac:	e002      	b.n	8001bb4 <LoopFillZerobss>

08001bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bb0:	f842 3b04 	str.w	r3, [r2], #4

08001bb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bb8:	d3f9      	bcc.n	8001bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bba:	f7ff ffc5 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f000 f80f 	bl	8001be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc2:	f7ff fb85 	bl	80012d0 <main>
  bx lr
 8001bc6:	4770      	bx	lr
  ldr r3, =_sidata
 8001bc8:	080070a8 	.word	0x080070a8
  ldr r0, =_sdata
 8001bcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bd0:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8001bd4:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8001bd8:	200004a0 	.word	0x200004a0

08001bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC1_2_IRQHandler>
	...

08001be0 <__libc_init_array>:
 8001be0:	b570      	push	{r4, r5, r6, lr}
 8001be2:	2500      	movs	r5, #0
 8001be4:	4e0c      	ldr	r6, [pc, #48]	; (8001c18 <__libc_init_array+0x38>)
 8001be6:	4c0d      	ldr	r4, [pc, #52]	; (8001c1c <__libc_init_array+0x3c>)
 8001be8:	1ba4      	subs	r4, r4, r6
 8001bea:	10a4      	asrs	r4, r4, #2
 8001bec:	42a5      	cmp	r5, r4
 8001bee:	d109      	bne.n	8001c04 <__libc_init_array+0x24>
 8001bf0:	f000 f822 	bl	8001c38 <_init>
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	4e0a      	ldr	r6, [pc, #40]	; (8001c20 <__libc_init_array+0x40>)
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	; (8001c24 <__libc_init_array+0x44>)
 8001bfa:	1ba4      	subs	r4, r4, r6
 8001bfc:	10a4      	asrs	r4, r4, #2
 8001bfe:	42a5      	cmp	r5, r4
 8001c00:	d105      	bne.n	8001c0e <__libc_init_array+0x2e>
 8001c02:	bd70      	pop	{r4, r5, r6, pc}
 8001c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c08:	4798      	blx	r3
 8001c0a:	3501      	adds	r5, #1
 8001c0c:	e7ee      	b.n	8001bec <__libc_init_array+0xc>
 8001c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c12:	4798      	blx	r3
 8001c14:	3501      	adds	r5, #1
 8001c16:	e7f2      	b.n	8001bfe <__libc_init_array+0x1e>
 8001c18:	080070a0 	.word	0x080070a0
 8001c1c:	080070a0 	.word	0x080070a0
 8001c20:	080070a0 	.word	0x080070a0
 8001c24:	080070a4 	.word	0x080070a4

08001c28 <memset>:
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4402      	add	r2, r0
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d100      	bne.n	8001c32 <memset+0xa>
 8001c30:	4770      	bx	lr
 8001c32:	f803 1b01 	strb.w	r1, [r3], #1
 8001c36:	e7f9      	b.n	8001c2c <memset+0x4>

08001c38 <_init>:
 8001c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3a:	bf00      	nop
 8001c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3e:	bc08      	pop	{r3}
 8001c40:	469e      	mov	lr, r3
 8001c42:	4770      	bx	lr

08001c44 <_fini>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	bf00      	nop
 8001c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4a:	bc08      	pop	{r3}
 8001c4c:	469e      	mov	lr, r3
 8001c4e:	4770      	bx	lr
